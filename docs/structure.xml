<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a6" title="">
  <file path="admin\batches\BatchBoilerPlate.php" hash="607a5543d31073500b941e57f4e0e3e2" package="Default">
    <class final="false" abstract="false" namespace="" line="14" package="Default">
      <extends>Allproperty\BatchBase</extends>
      <implements>BatchInterface</implements>
      <name>BatchBoilerPlate</name>
      <full_name>\BatchBoilerPlate</full_name>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="author" description="Your Name &lt;your_email@thiscompany.com&gt;"/>
        <tag line="14" name="date" description="The Date"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="16" package="Default">
        <name>init</name>
        <full_name>init</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="21" package="Default">
        <name>action</name>
        <full_name>action</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="14" code="50005">No short description for class \BatchBoilerPlate</critical>
      <error line="16" code="50010">No DocBlock was found for method init()</error>
      <error line="21" code="50010">No DocBlock was found for method action()</error>
    </parse_markers>
  </file>
  <file path="admin\batches\DummyBatch.php" hash="aff9a591d98d8a8866f3a73ac4554f1a" package="Default">
    <class final="false" abstract="false" namespace="" line="10" package="Default">
      <extends>Allproperty\BatchBase</extends>
      <implements>BatchInterface</implements>
      <name>DummyBatch</name>
      <full_name>\DummyBatch</full_name>
      <docblock line="10">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="author" description="John Rocela &lt;johnmark@allproperty.com.sg&gt;"/>
        <tag line="10" name="date" description="June 12, 2012"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="14" package="Default">
        <name>init</name>
        <full_name>init</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="20" package="Default">
        <name>action</name>
        <full_name>action</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="10" code="50005">No short description for class \DummyBatch</critical>
      <error line="14" code="50010">No DocBlock was found for method init()</error>
      <error line="20" code="50010">No DocBlock was found for method action()</error>
    </parse_markers>
  </file>
  <file path="admin\crons\hey.php" hash="33eb7e923673bf28b3ce9006cfef3d66" package="Default"/>
  <file path="admin\index.php" hash="b0dba9fcc890446c2b56a8abb6d2f550" package="Default">
    <include line="3" type="Require" package="Default">
      <name>Slim/Slim.php</name>
    </include>
    <include line="4" type="Include" package="Default">
      <name>../../../../bootstrap.php</name>
    </include>
    <include line="5" type="Require" package="Default">
      <name>../BatchManager.php</name>
    </include>
    <include line="16" type="Include" package="Default">
      <name>views/index.php</name>
    </include>
  </file>
  <file path="admin\Slim\Environment.php" hash="80c7a9d54b0631a91568bee2fe11ed1c" package="Default">
    <class final="false" abstract="false" namespace="" line="50" package="Slim">
      <extends/>
      <implements>ArrayAccess</implements>
      <implements>IteratorAggregate</implements>
      <name>Slim_Environment</name>
      <full_name>\Slim_Environment</full_name>
      <docblock line="50">
        <description><![CDATA[Environment]]></description>
        <long-description><![CDATA[<p>This class creates and returns a key/value array of common
environment variables for the current HTTP request.</p>

<p>This is a singleton class; derived environment variables will
be common across multiple Slim applications.</p>

<p>This class matches the Rack (Ruby) specification as closely
as possible. More information available below.</p>]]></long-description>
        <tag line="50" name="package" description="Slim"/>
        <tag line="50" name="author" description="Josh Lockhart"/>
        <tag line="50" name="since" description="1.6.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="54" namespace="" package="Default">
        <name>$properties</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="59" namespace="" package="Default">
        <name>$environment</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="\Slim_Environment">
            <type by_reference="false">\Slim_Environment</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="71" package="Slim">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="71">
          <description><![CDATA[Get environment instance (singleton)]]></description>
          <long-description><![CDATA[<p>This creates and/or returns an Environment instance (singleton)
derived from $_SERVER variables. You may override the global server
variables by using <code>Environment::mock()</code> instead.</p>]]></long-description>
          <tag line="71" name="param" description="Refresh properties using global server variables?" type="bool" variable="$refresh">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="71" name="return" description="" type="\Slim_Environment">
            <type by_reference="false">\Slim_Environment</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$refresh</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="84" package="Slim">
        <name>mock</name>
        <full_name>mock</full_name>
        <docblock line="84">
          <description><![CDATA[Get mock environment instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="array" variable="$userSettings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="return" description="" type="\Environment">
            <type by_reference="false">\Environment</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$userSettings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="110" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="110">
          <description><![CDATA[Constructor (private access)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="If present, these are used instead of global server variables" type="array|null" variable="$settings">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="110" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$settings</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="189" package="Slim">
        <name>offsetExists</name>
        <full_name>offsetExists</full_name>
        <docblock line="189">
          <description><![CDATA[Array Access: Offset Exists]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="189">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="196" package="Slim">
        <name>offsetGet</name>
        <full_name>offsetGet</full_name>
        <docblock line="196">
          <description><![CDATA[Array Access: Offset Get]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="196">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="207" package="Slim">
        <name>offsetSet</name>
        <full_name>offsetSet</full_name>
        <docblock line="207">
          <description><![CDATA[Array Access: Offset Set]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="207">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="207">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="214" package="Slim">
        <name>offsetUnset</name>
        <full_name>offsetUnset</full_name>
        <docblock line="214">
          <description><![CDATA[Array Access: Offset Unset]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="214">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="223" package="Slim">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="223">
          <description><![CDATA[IteratorAggregate]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="223" name="return" description="" type="\ArrayIterator">
            <type by_reference="false">\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="54" code="50019">No short description for property $properties</critical>
      <critical line="59" code="50019">No short description for property $environment</critical>
      <error line="189" code="50015">Argument $offset is missing from the Docblock of offsetExists()</error>
      <error line="196" code="50015">Argument $offset is missing from the Docblock of offsetGet()</error>
      <error line="207" code="50015">Argument $offset is missing from the Docblock of offsetSet()</error>
      <error line="207" code="50015">Argument $value is missing from the Docblock of offsetSet()</error>
      <error line="214" code="50015">Argument $offset is missing from the Docblock of offsetUnset()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Exception\Pass.php" hash="b6c289a2deb958ad019b58de0f267b14" package="Default">
    <class final="false" abstract="false" namespace="" line="46" package="Slim">
      <extends>Exception</extends>
      <name>Slim_Exception_Pass</name>
      <full_name>\Slim_Exception_Pass</full_name>
      <docblock line="46">
        <description><![CDATA[Pass Exception]]></description>
        <long-description><![CDATA[<p>This Exception will cause the Router::dispatch method
to skip the current matching route and continue to the next
matching route. If no subsequent routes are found, a
HTTP 404 Not Found response will be sent to the client.</p>]]></long-description>
        <tag line="46" name="package" description="Slim"/>
        <tag line="46" name="author" description="Josh Lockhart"/>
        <tag line="46" name="since" description="1.0.0"/>
      </docblock>
    </class>
  </file>
  <file path="admin\Slim\Exception\RequestSlash.php" hash="c11dfb0f0bc14780d593c0d5ff4d2e62" package="Default">
    <class final="false" abstract="false" namespace="" line="47" package="Slim">
      <extends>Exception</extends>
      <name>Slim_Exception_RequestSlash</name>
      <full_name>\Slim_Exception_RequestSlash</full_name>
      <docblock line="47">
        <description><![CDATA[Request Slash Exception]]></description>
        <long-description><![CDATA[<p>This Exception is thrown when Slim detects a matching route
(defined with a trailing slash) and the HTTP request
matches the route but does not have a trailing slash. This
exception will be caught in <code>Slim::run</code> and trigger a 301 redirect
to the same resource URI with a trailing slash.</p>]]></long-description>
        <tag line="47" name="package" description="Slim"/>
        <tag line="47" name="author" description="Josh Lockhart"/>
        <tag line="47" name="since" description="1.0.0"/>
      </docblock>
    </class>
  </file>
  <file path="admin\Slim\Exception\Stop.php" hash="a4f9f1c8a2dd50ab049bf17e0619087c" package="Default">
    <class final="false" abstract="false" namespace="" line="44" package="Slim">
      <extends>Exception</extends>
      <name>Slim_Exception_Stop</name>
      <full_name>\Slim_Exception_Stop</full_name>
      <docblock line="44">
        <description><![CDATA[Stop Exception]]></description>
        <long-description><![CDATA[<p>This Exception is thrown when the Slim application needs to abort
processing and return control flow to the outer PHP script.</p>]]></long-description>
        <tag line="44" name="package" description="Slim"/>
        <tag line="44" name="author" description="Josh Lockhart"/>
        <tag line="44" name="since" description="1.0.0"/>
      </docblock>
    </class>
  </file>
  <file path="admin\Slim\Http\Headers.php" hash="7dc81b6c75afc3463a47209e3567da90" package="Default">
    <class final="false" abstract="false" namespace="" line="49" package="Slim">
      <extends/>
      <implements>ArrayAccess</implements>
      <implements>Iterator</implements>
      <implements>Countable</implements>
      <name>Slim_Http_Headers</name>
      <full_name>\Slim_Http_Headers</full_name>
      <docblock line="49">
        <description><![CDATA[HTTP Headers]]></description>
        <long-description><![CDATA[<p>This class is an abstraction of the HTTP response headers and
provides array access to the header list while automatically
stores and retrieves headers with lowercase canonical keys regardless
of the input format.</p>

<p>This class also implements the <code>Iterator</code> and <code>Countable</code>
interfaces for even more convenient usage.</p>]]></long-description>
        <tag line="49" name="package" description="Slim"/>
        <tag line="49" name="author" description="Josh Lockhart"/>
        <tag line="49" name="since" description="1.6.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="53" namespace="" package="Default">
        <name>$headers</name>
        <default><![CDATA[]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="HTTP headers" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" namespace="" package="Default">
        <name>$map</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="Map canonical header name to original header name" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="65" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="65">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$headers</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="74" package="Slim">
        <name>merge</name>
        <full_name>merge</full_name>
        <docblock line="74">
          <description><![CDATA[Merge Headers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="74" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$headers</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="85" package="Slim">
        <name>canonical</name>
        <full_name>canonical</full_name>
        <docblock line="85">
          <description><![CDATA[Transform header name into canonical form]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="92" package="Slim">
        <name>offsetExists</name>
        <full_name>offsetExists</full_name>
        <docblock line="92">
          <description><![CDATA[Array Access: Offset Exists]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="92">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="99" package="Slim">
        <name>offsetGet</name>
        <full_name>offsetGet</full_name>
        <docblock line="99">
          <description><![CDATA[Array Access: Offset Get]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="99">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="111" package="Slim">
        <name>offsetSet</name>
        <full_name>offsetSet</full_name>
        <docblock line="111">
          <description><![CDATA[Array Access: Offset Set]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="111">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="120" package="Slim">
        <name>offsetUnset</name>
        <full_name>offsetUnset</full_name>
        <docblock line="120">
          <description><![CDATA[Array Access: Offset Unset]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="120">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="128" package="Slim">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="128">
          <description><![CDATA[Countable: Count]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="135" package="Slim">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="135">
          <description><![CDATA[Iterator: Rewind]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="142" package="Slim">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="142">
          <description><![CDATA[Iterator: Current]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="149" package="Slim">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="149">
          <description><![CDATA[Iterator: Key]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="157" package="Slim">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="157">
          <description><![CDATA[Iterator: Next]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="164" package="Slim">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="164">
          <description><![CDATA[Iterator: Valid]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="53" code="50019">No short description for property $headers</critical>
      <critical line="58" code="50019">No short description for property $map</critical>
      <error line="92" code="50015">Argument $offset is missing from the Docblock of offsetExists()</error>
      <error line="99" code="50015">Argument $offset is missing from the Docblock of offsetGet()</error>
      <error line="111" code="50015">Argument $offset is missing from the Docblock of offsetSet()</error>
      <error line="111" code="50015">Argument $value is missing from the Docblock of offsetSet()</error>
      <error line="120" code="50015">Argument $offset is missing from the Docblock of offsetUnset()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Http\Request.php" hash="8c7f0fc8bb6e69d54b33a7330c7ca4ba" package="Default">
    <class final="false" abstract="false" namespace="" line="44" package="Slim">
      <extends/>
      <name>Slim_Http_Request</name>
      <full_name>\Slim_Http_Request</full_name>
      <docblock line="44">
        <description><![CDATA[Slim HTTP Request]]></description>
        <long-description><![CDATA[<p>This class provides a human-friendly interface to the Slim environment variables;
environment variables are passed by reference and will be modified directly.</p>]]></long-description>
        <tag line="44" name="package" description="Slim"/>
        <tag line="44" name="author" description="Josh Lockhart"/>
        <tag line="44" name="since" description="1.0.0"/>
      </docblock>
      <constant namespace="" line="45" package="Slim">
        <name>METHOD_HEAD</name>
        <full_name>METHOD_HEAD</full_name>
        <value><![CDATA['HEAD']]></value>
      </constant>
      <constant namespace="" line="46" package="Slim">
        <name>METHOD_GET</name>
        <full_name>METHOD_GET</full_name>
        <value><![CDATA['GET']]></value>
      </constant>
      <constant namespace="" line="47" package="Slim">
        <name>METHOD_POST</name>
        <full_name>METHOD_POST</full_name>
        <value><![CDATA['POST']]></value>
      </constant>
      <constant namespace="" line="48" package="Slim">
        <name>METHOD_PUT</name>
        <full_name>METHOD_PUT</full_name>
        <value><![CDATA['PUT']]></value>
      </constant>
      <constant namespace="" line="49" package="Slim">
        <name>METHOD_DELETE</name>
        <full_name>METHOD_DELETE</full_name>
        <value><![CDATA['DELETE']]></value>
      </constant>
      <constant namespace="" line="50" package="Slim">
        <name>METHOD_OPTIONS</name>
        <full_name>METHOD_OPTIONS</full_name>
        <value><![CDATA['OPTIONS']]></value>
      </constant>
      <constant namespace="" line="51" package="Slim">
        <name>METHOD_OVERRIDE</name>
        <full_name>METHOD_OVERRIDE</full_name>
        <value><![CDATA['_METHOD']]></value>
      </constant>
      <property final="false" static="true" visibility="protected" line="56" namespace="" package="Default">
        <name>$formDataMediaTypes</name>
        <default><![CDATA[array('application/x-www-form-urlencoded')]]></default>
        <docblock line="56">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="" package="Default">
        <name>$env</name>
        <default><![CDATA[]]></default>
        <docblock line="61">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="68" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="68">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="array" variable="$env">
            <type by_reference="false">array</type>
          </tag>
          <tag line="68" name="see" description="\Slim_Environment" refers="\Slim_Environment"/>
        </docblock>
        <argument line="68">
          <name>$env</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="76" package="Slim">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="76">
          <description><![CDATA[Get HTTP method]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="84" package="Slim">
        <name>isGet</name>
        <full_name>isGet</full_name>
        <docblock line="84">
          <description><![CDATA[Is this a GET request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="92" package="Slim">
        <name>isPost</name>
        <full_name>isPost</full_name>
        <docblock line="92">
          <description><![CDATA[Is this a POST request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="100" package="Slim">
        <name>isPut</name>
        <full_name>isPut</full_name>
        <docblock line="100">
          <description><![CDATA[Is this a PUT request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="108" package="Slim">
        <name>isDelete</name>
        <full_name>isDelete</full_name>
        <docblock line="108">
          <description><![CDATA[Is this a DELETE request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="116" package="Slim">
        <name>isHead</name>
        <full_name>isHead</full_name>
        <docblock line="116">
          <description><![CDATA[Is this a HEAD request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="124" package="Slim">
        <name>isOptions</name>
        <full_name>isOptions</full_name>
        <docblock line="124">
          <description><![CDATA[Is this a OPTIONS request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="132" package="Slim">
        <name>isAjax</name>
        <full_name>isAjax</full_name>
        <docblock line="132">
          <description><![CDATA[Is this an AJAX request?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="Slim">
        <name>isXhr</name>
        <full_name>isXhr</full_name>
        <docblock line="146">
          <description><![CDATA[Is this an XHR request? (alias of Slim_Http_Request::isAjax)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="159" package="Slim">
        <name>params</name>
        <full_name>params</full_name>
        <docblock line="159">
          <description><![CDATA[Fetch GET and POST data]]></description>
          <long-description><![CDATA[<p>This method returns a union of GET and POST data as a key-value array, or the value
of the array key if requested; if the array key does not exist, NULL is returned.</p>]]></long-description>
          <tag line="159" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="return" description="" type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="181" package="Slim">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="181">
          <description><![CDATA[Fetch GET data]]></description>
          <long-description><![CDATA[<p>This method returns a key-value array of data sent in the HTTP request query string, or
the value of the array key if requested; if the array key does not exist, NULL is returned.</p>]]></long-description>
          <tag line="181" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="181" name="return" description="" type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="212" package="Slim">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="212">
          <description><![CDATA[Fetch POST data]]></description>
          <long-description><![CDATA[<p>This method returns a key-value array of data sent in the HTTP request body, or
the value of a hash key if requested; if the array key does not exist, NULL is returned.</p>]]></long-description>
          <tag line="212" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="212" name="return" description="" type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="212" name="throws" description="If environment input is not available" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="246" package="Slim">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="246">
          <description><![CDATA[Fetch PUT data (alias for Slim_Http_Request::post)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="246" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="246" name="return" description="" type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="246">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="255" package="Slim">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="255">
          <description><![CDATA[Fetch DELETE data (alias for Slim_Http_Request::post)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="255" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="255" name="return" description="" type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="268" package="Slim">
        <name>cookies</name>
        <full_name>cookies</full_name>
        <docblock line="268">
          <description><![CDATA[Fetch COOKIE data]]></description>
          <long-description><![CDATA[<p>This method returns a key-value array of Cookie data sent in the HTTP request, or
the value of a array key if requested; if the array key does not exist, NULL is returned.</p>]]></long-description>
          <tag line="268" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="268" name="return" description="" type="array|string|null">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="288" package="Slim">
        <name>isFormData</name>
        <full_name>isFormData</full_name>
        <docblock line="288">
          <description><![CDATA[Does the Request body contain parseable form data?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="288" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="303" package="Slim">
        <name>headers</name>
        <full_name>headers</full_name>
        <docblock line="303">
          <description><![CDATA[Get Headers]]></description>
          <long-description><![CDATA[<p>This method returns a key-value array of headers sent in the HTTP request, or
the value of a hash key if requested; if the array key does not exist, NULL is returned.</p>]]></long-description>
          <tag line="303" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="303" name="param" description="The default value returned if the requested header is not available" type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="303" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="303">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="303">
          <name>$default</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="328" package="Slim">
        <name>getBody</name>
        <full_name>getBody</full_name>
        <docblock line="328">
          <description><![CDATA[Get Body]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="328" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="336" package="Slim">
        <name>getContentType</name>
        <full_name>getContentType</full_name>
        <docblock line="336">
          <description><![CDATA[Get Content Type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="336" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="348" package="Slim">
        <name>getMediaType</name>
        <full_name>getMediaType</full_name>
        <docblock line="348">
          <description><![CDATA[Get Media Type (type/subtype within Content Type header)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="348" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="362" package="Slim">
        <name>getMediaTypeParams</name>
        <full_name>getMediaTypeParams</full_name>
        <docblock line="362">
          <description><![CDATA[Get Media Type Params]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="362" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="380" package="Slim">
        <name>getContentCharset</name>
        <full_name>getContentCharset</full_name>
        <docblock line="380">
          <description><![CDATA[Get Content Charset]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="380" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="393" package="Slim">
        <name>getContentLength</name>
        <full_name>getContentLength</full_name>
        <docblock line="393">
          <description><![CDATA[Get Content-Length]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="393" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="405" package="Slim">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="405">
          <description><![CDATA[Get Host]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="405" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="421" package="Slim">
        <name>getHostWithPort</name>
        <full_name>getHostWithPort</full_name>
        <docblock line="421">
          <description><![CDATA[Get Host with Port]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="421" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="429" package="Slim">
        <name>getPort</name>
        <full_name>getPort</full_name>
        <docblock line="429">
          <description><![CDATA[Get Port]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="429" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="437" package="Slim">
        <name>getScheme</name>
        <full_name>getScheme</full_name>
        <docblock line="437">
          <description><![CDATA[Get Scheme (https or http)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="437" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="445" package="Slim">
        <name>getScriptName</name>
        <full_name>getScriptName</full_name>
        <docblock line="445">
          <description><![CDATA[Get Script Name (physical path)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="445" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="453" package="Slim">
        <name>getRootUri</name>
        <full_name>getRootUri</full_name>
        <docblock line="453">
          <description><![CDATA[LEGACY: Get Root URI (alias for Slim_Http_Request::getScriptName)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="453" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="461" package="Slim">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="461">
          <description><![CDATA[Get Path (physical path + virtual path)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="461" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="469" package="Slim">
        <name>getPathInfo</name>
        <full_name>getPathInfo</full_name>
        <docblock line="469">
          <description><![CDATA[Get Path Info (virtual path)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="469" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="477" package="Slim">
        <name>getResourceUri</name>
        <full_name>getResourceUri</full_name>
        <docblock line="477">
          <description><![CDATA[LEGACY: Get Resource URI (alias for Slim_Http_Request::getPathInfo)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="477" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="485" package="Slim">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="485">
          <description><![CDATA[Get URL (scheme + host [ + port if non-standard ])]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="485" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="497" package="Slim">
        <name>getIp</name>
        <full_name>getIp</full_name>
        <docblock line="497">
          <description><![CDATA[Get IP]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="497" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="510" package="Slim">
        <name>getReferrer</name>
        <full_name>getReferrer</full_name>
        <docblock line="510">
          <description><![CDATA[Get Referrer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="510" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="522" package="Slim">
        <name>getReferer</name>
        <full_name>getReferer</full_name>
        <docblock line="522">
          <description><![CDATA[Get Referer (for those who can't spell)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="522" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="530" package="Slim">
        <name>getUserAgent</name>
        <full_name>getUserAgent</full_name>
        <docblock line="530">
          <description><![CDATA[Get User Agent]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="530" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="56" code="50019">No short description for property $formDataMediaTypes</critical>
      <critical line="61" code="50019">No short description for property $env</critical>
    </parse_markers>
  </file>
  <file path="admin\Slim\Http\Response.php" hash="8a0e987845b33e1dd92f9d1ad1c548d3" package="Default">
    <class final="false" abstract="false" namespace="" line="45" package="Slim">
      <extends/>
      <implements>ArrayAccess</implements>
      <implements>Countable</implements>
      <implements>IteratorAggregate</implements>
      <name>Slim_Http_Response</name>
      <full_name>\Slim_Http_Response</full_name>
      <docblock line="45">
        <description><![CDATA[Response]]></description>
        <long-description><![CDATA[<p>This is a simple abstraction over top an HTTP response. This
provides methods to set the HTTP status, the HTTP headers,
and the HTTP body.</p>]]></long-description>
        <tag line="45" name="package" description="Slim"/>
        <tag line="45" name="author" description="Josh Lockhart"/>
        <tag line="45" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="49" namespace="" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="HTTP status code" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" namespace="" package="Default">
        <name>$header</name>
        <default><![CDATA[]]></default>
        <docblock line="55">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="List of HTTP response headers" type="\Slim_Http_Headers">
            <type by_reference="false">\Slim_Http_Headers</type>
          </tag>
          <tag line="55" name="see" description="\Slim_Http_Headers" refers="\Slim_Http_Headers"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="" package="Default">
        <name>$body</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="HTTP response body" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" namespace="" package="Default">
        <name>$length</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="Length of HTTP response body" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="70" namespace="" package="Default">
        <name>$messages</name>
        <default><![CDATA[array(100 => '100 Continue', 101 => '101 Switching Protocols', 200 => '200 OK', 201 => '201 Created', 202 => '202 Accepted', 203 => '203 Non-Authoritative Information', 204 => '204 No Content', 205 => '205 Reset Content', 206 => '206 Partial Content', 300 => '300 Multiple Choices', 301 => '301 Moved Permanently', 302 => '302 Found', 303 => '303 See Other', 304 => '304 Not Modified', 305 => '305 Use Proxy', 306 => '306 (Unused)', 307 => '307 Temporary Redirect', 400 => '400 Bad Request', 401 => '401 Unauthorized', 402 => '402 Payment Required', 403 => '403 Forbidden', 404 => '404 Not Found', 405 => '405 Method Not Allowed', 406 => '406 Not Acceptable', 407 => '407 Proxy Authentication Required', 408 => '408 Request Timeout', 409 => '409 Conflict', 410 => '410 Gone', 411 => '411 Length Required', 412 => '412 Precondition Failed', 413 => '413 Request Entity Too Large', 414 => '414 Request-URI Too Long', 415 => '415 Unsupported Media Type', 416 => '416 Requested Range Not Satisfiable', 417 => '417 Expectation Failed', 422 => '422 Unprocessable Entity', 423 => '423 Locked', 500 => '500 Internal Server Error', 501 => '501 Not Implemented', 502 => '502 Bad Gateway', 503 => '503 Service Unavailable', 504 => '504 Gateway Timeout', 505 => '505 HTTP Version Not Supported')]]></default>
        <docblock line="70">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="var" description="HTTP response codes and messages" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="127" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="127">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="The HTTP response body" type="string" variable="$body">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="param" description="The HTTP response status" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="127" name="param" description="The HTTP response headers" type="\Slim_Http_Headers|array" variable="$header">
            <type by_reference="false">\Slim_Http_Headers</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$body</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$status</name>
          <default><![CDATA[200]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$header</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="143" package="Slim">
        <name>status</name>
        <full_name>status</full_name>
        <docblock line="143">
          <description><![CDATA[Get and set status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="int|null" variable="$status">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="143" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$status</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="156" package="Slim">
        <name>header</name>
        <full_name>header</full_name>
        <docblock line="156">
          <description><![CDATA[Get and set header]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="param" description="Header name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="156" name="param" description="Header value" type="string|null" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="156" name="return" description="Header value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="167" package="Slim">
        <name>headers</name>
        <full_name>headers</full_name>
        <docblock line="167">
          <description><![CDATA[Get headers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="return" description="" type="\Slim_Http_Headers">
            <type by_reference="false">\Slim_Http_Headers</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="176" package="Slim">
        <name>body</name>
        <full_name>body</full_name>
        <docblock line="176">
          <description><![CDATA[Get and set body]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="Content of HTTP response body" type="string|null" variable="$body">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="176" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$body</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="188" package="Slim">
        <name>length</name>
        <full_name>length</full_name>
        <docblock line="188">
          <description><![CDATA[Get and set length]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="188" name="param" description="" type="int|null" variable="$length">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="188" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$length</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="201" package="Slim">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="201">
          <description><![CDATA[Append HTTP response body]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="param" description="Content to append to the current HTTP response body" type="string" variable="$body">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="param" description="Overwrite existing response body?" type="bool" variable="$replace">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="201" name="return" description="The updated HTTP response body" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$body</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="201">
          <name>$replace</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="220" package="Slim">
        <name>finalize</name>
        <full_name>finalize</full_name>
        <docblock line="220">
          <description><![CDATA[Finalize]]></description>
          <long-description><![CDATA[<p>This prepares this response and returns an array
of [status, headers, body]. This array is passed to outer middleware
if available or directly to the Slim run method.</p>]]></long-description>
          <tag line="220" name="return" description="status, array headers, string body]" type="\array[int">
            <type by_reference="false">\array[int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="242" package="Slim">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="242">
          <description><![CDATA[Set cookie]]></description>
          <long-description><![CDATA[<p>Instead of using PHP's <code>setcookie()</code> function, Slim manually constructs the HTTP <code>Set-Cookie</code>
header on its own and delegates this responsibility to the <code>Slim_Http_Util</code> class. This
response's header is passed by reference to the utility class and is directly modified. By not
relying on PHP's native implementation, Slim allows middleware the opportunity to massage or
analyze the raw header before the response is ultimately delivered to the HTTP client.</p>]]></long-description>
          <tag line="242" name="param" description="The name of the cookie" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="242" name="param" description="If string, the value of cookie; if array, properties for cookie including: value, expire, path, domain, secure, httponly" type="string|array" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="242">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="264" package="Slim">
        <name>deleteCookie</name>
        <full_name>deleteCookie</full_name>
        <docblock line="264">
          <description><![CDATA[Delete cookie]]></description>
          <long-description><![CDATA[<p>Instead of using PHP's <code>setcookie()</code> function, Slim manually constructs the HTTP <code>Set-Cookie</code>
header on its own and delegates this responsibility to the <code>Slim_Http_Util</code> class. This
response's header is passed by reference to the utility class and is directly modified. By not
relying on PHP's native implementation, Slim allows middleware the opportunity to massage or
analyze the raw header before the response is ultimately delivered to the HTTP client.</p>

<p>This method will set a cookie with the given name that has an expiration time in the past; this will
prompt the HTTP client to invalidate and remove the client-side cookie. Optionally, you may
also pass a key/value array as the second argument. If the "domain" key is present in this
array, only the Cookie with the given name AND domain will be removed. The invalidating cookie
sent with this response will adopt all properties of the second argument.</p>]]></long-description>
          <tag line="264" name="param" description="The name of the cookie" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="264" name="param" description="Properties for cookie including: value, expire, path, domain, secure, httponly" type="array" variable="$value">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="264">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="264">
          <name>$value</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="277" package="Slim">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="277">
          <description><![CDATA[Redirect]]></description>
          <long-description><![CDATA[<p>This method prepares this response to return an HTTP Redirect response
to the HTTP client.</p>]]></long-description>
          <tag line="277" name="param" description="The redirect destination" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="277" name="param" description="The redirect HTTP status code" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$url</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$status</name>
          <default><![CDATA[302]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="286" package="Slim">
        <name>isEmpty</name>
        <full_name>isEmpty</full_name>
        <docblock line="286">
          <description><![CDATA[Helpers: Empty?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="286" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="294" package="Slim">
        <name>isInformational</name>
        <full_name>isInformational</full_name>
        <docblock line="294">
          <description><![CDATA[Helpers: Informational?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="294" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="302" package="Slim">
        <name>isOk</name>
        <full_name>isOk</full_name>
        <docblock line="302">
          <description><![CDATA[Helpers: OK?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="302" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="310" package="Slim">
        <name>isSuccessful</name>
        <full_name>isSuccessful</full_name>
        <docblock line="310">
          <description><![CDATA[Helpers: Successful?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="318" package="Slim">
        <name>isRedirect</name>
        <full_name>isRedirect</full_name>
        <docblock line="318">
          <description><![CDATA[Helpers: Redirect?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="318" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="326" package="Slim">
        <name>isRedirection</name>
        <full_name>isRedirection</full_name>
        <docblock line="326">
          <description><![CDATA[Helpers: Redirection?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="326" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="334" package="Slim">
        <name>isForbidden</name>
        <full_name>isForbidden</full_name>
        <docblock line="334">
          <description><![CDATA[Helpers: Forbidden?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="334" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="342" package="Slim">
        <name>isNotFound</name>
        <full_name>isNotFound</full_name>
        <docblock line="342">
          <description><![CDATA[Helpers: Not Found?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="342" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="350" package="Slim">
        <name>isClientError</name>
        <full_name>isClientError</full_name>
        <docblock line="350">
          <description><![CDATA[Helpers: Client error?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="350" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="358" package="Slim">
        <name>isServerError</name>
        <full_name>isServerError</full_name>
        <docblock line="358">
          <description><![CDATA[Helpers: Server Error?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="358" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="365" package="Slim">
        <name>offsetExists</name>
        <full_name>offsetExists</full_name>
        <docblock line="365">
          <description><![CDATA[Array Access: Offset Exists]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="365">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="372" package="Slim">
        <name>offsetGet</name>
        <full_name>offsetGet</full_name>
        <docblock line="372">
          <description><![CDATA[Array Access: Offset Get]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="372">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="383" package="Slim">
        <name>offsetSet</name>
        <full_name>offsetSet</full_name>
        <docblock line="383">
          <description><![CDATA[Array Access: Offset Set]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="383">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="383">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="390" package="Slim">
        <name>offsetUnset</name>
        <full_name>offsetUnset</full_name>
        <docblock line="390">
          <description><![CDATA[Array Access: Offset Unset]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="390">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="397" package="Slim">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="397">
          <description><![CDATA[Countable: Count]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="409" package="Slim">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="409">
          <description><![CDATA[Get Iterator]]></description>
          <long-description><![CDATA[<p>This returns the contained <code>Slim_Http_Headers</code> instance which
is itself iterable.</p>]]></long-description>
          <tag line="409" name="return" description="" type="\Slim_Http_Headers">
            <type by_reference="false">\Slim_Http_Headers</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="417" package="Slim">
        <name>getMessageForCode</name>
        <full_name>getMessageForCode</full_name>
        <docblock line="417">
          <description><![CDATA[Get message for HTTP status code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="417" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="417">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="49" code="50019">No short description for property $status</critical>
      <critical line="55" code="50019">No short description for property $header</critical>
      <critical line="60" code="50019">No short description for property $body</critical>
      <critical line="65" code="50019">No short description for property $length</critical>
      <critical line="70" code="50019">No short description for property $messages</critical>
      <error line="365" code="50015">Argument $offset is missing from the Docblock of offsetExists()</error>
      <error line="372" code="50015">Argument $offset is missing from the Docblock of offsetGet()</error>
      <error line="383" code="50015">Argument $offset is missing from the Docblock of offsetSet()</error>
      <error line="383" code="50015">Argument $value is missing from the Docblock of offsetSet()</error>
      <error line="390" code="50015">Argument $offset is missing from the Docblock of offsetUnset()</error>
      <error line="417" code="50015">Argument $status is missing from the Docblock of getMessageForCode()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Http\Util.php" hash="2aa0170c3c2c4c7046325583d15e37aa" package="Default">
    <class final="false" abstract="false" namespace="" line="43" package="Slim">
      <extends/>
      <name>Slim_Http_Util</name>
      <full_name>\Slim_Http_Util</full_name>
      <docblock line="43">
        <description><![CDATA[Slim HTTP Utilities]]></description>
        <long-description><![CDATA[<p>This class provides useful methods for handling HTTP requests.</p>]]></long-description>
        <tag line="43" name="package" description="Slim"/>
        <tag line="43" name="author" description="Josh Lockhart"/>
        <tag line="43" name="since" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="55" package="Slim">
        <name>stripSlashesIfMagicQuotes</name>
        <full_name>stripSlashesIfMagicQuotes</full_name>
        <docblock line="55">
          <description><![CDATA[Strip slashes from string or array]]></description>
          <long-description><![CDATA[<p>This method strips slashes from its input. By default, this method will only
strip slashes from its input if magic quotes are enabled. Otherwise, you may
override the magic quotes setting with either TRUE or FALSE as the send argument
to force this method to strip or not strip slashes from its input.</p>]]></long-description>
          <tag line="55" name="var" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$rawData</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$overrideStripSlashes</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="69" package="Slim">
        <name>_stripSlashes</name>
        <full_name>_stripSlashes</full_name>
        <docblock line="69">
          <description><![CDATA[Strip slashes from string or array]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="" type="array|string" variable="$rawData">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="return" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$rawData</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="87" package="Slim">
        <name>encrypt</name>
        <full_name>encrypt</full_name>
        <docblock line="87">
          <description><![CDATA[Encrypt data]]></description>
          <long-description><![CDATA[<p>This method will encrypt data using a given key, vector, and cipher.
By default, this will encrypt data using the RIJNDAEL/AES 256 bit cipher. You
may override the default cipher and cipher mode by passing your own desired
cipher and cipher mode as the final key-value array argument.</p>]]></long-description>
          <tag line="87" name="param" description="The unencrypted data" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="The encryption key" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="The encryption initialization vector" type="string" variable="$iv">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="Optional key-value array with custom algorithm and mode" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="87" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$iv</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="135" package="Slim">
        <name>decrypt</name>
        <full_name>decrypt</full_name>
        <docblock line="135">
          <description><![CDATA[Decrypt data]]></description>
          <long-description><![CDATA[<p>This method will decrypt data using a given key, vector, and cipher.
By default, this will decrypt data using the RIJNDAEL/AES 256 bit cipher. You
may override the default cipher and cipher mode by passing your own desired
cipher and cipher mode as the final key-value array argument.</p>]]></long-description>
          <tag line="135" name="param" description="The encrypted data" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="param" description="The encryption key" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="param" description="The encryption initialization vector" type="string" variable="$iv">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="param" description="Optional key-value array with custom algorithm and mode" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="135" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="135">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="135">
          <name>$iv</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="135">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="184" package="Slim">
        <name>encodeSecureCookie</name>
        <full_name>encodeSecureCookie</full_name>
        <docblock line="184">
          <description><![CDATA[Encode secure cookie value]]></description>
          <long-description><![CDATA[<p>This method will create the secure value of an HTTP cookie. The
cookie value is encrypted and hashed so that its value is
secure and checked for integrity when read in subsequent requests.</p>]]></long-description>
          <tag line="184" name="param" description="The unsecure HTTP cookie value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="param" description="The UNIX timestamp at which this cookie will expire" type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="184" name="param" description="The secret key used to hash the cookie value" type="string" variable="$secret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="param" description="The algorithm to use for encryption" type="int" variable="$algorithm">
            <type by_reference="false">int</type>
          </tag>
          <tag line="184" name="param" description="The algorithm mode to use for encryption" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="184" name="param" description="string" type="" variable=""/>
        </docblock>
        <argument line="184">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$expires</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$secret</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$algorithm</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$mode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="209" package="Slim">
        <name>decodeSecureCookie</name>
        <full_name>decodeSecureCookie</full_name>
        <docblock line="209">
          <description><![CDATA[Decode secure cookie value]]></description>
          <long-description><![CDATA[<p>This method will decode the secure value of an HTTP cookie. The
cookie value is encrypted and hashed so that its value is
secure and checked for integrity when read in subsequent requests.</p>]]></long-description>
          <tag line="209" name="param" description="The secure HTTP cookie value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="209" name="param" description="The UNIX timestamp at which this cookie will expire" type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="209" name="param" description="The secret key used to hash the cookie value" type="string" variable="$secret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="209" name="param" description="The algorithm to use for encryption" type="int" variable="$algorithm">
            <type by_reference="false">int</type>
          </tag>
          <tag line="209" name="param" description="The algorithm mode to use for encryption" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="209" name="param" description="string" type="" variable=""/>
        </docblock>
        <argument line="209">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$secret</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$algorithm</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$mode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="245" package="Slim">
        <name>setCookieHeader</name>
        <full_name>setCookieHeader</full_name>
        <docblock line="245">
          <description><![CDATA[Set HTTP cookie header]]></description>
          <long-description><![CDATA[<p>This method will construct and set the HTTP <code>Set-Cookie</code> header. Slim
uses this method instead of PHP's native <code>setcookie</code> method. This allows
more control of the HTTP header irrespective of the native implementation's
dependency on PHP versions.</p>

<p>This method accepts the Slim_Http_Headers object by reference as its
first argument; this method directly modifies this object instead of
returning a value.</p>]]></long-description>
          <tag line="245" name="param" description="" type="array" variable="$header">
            <type by_reference="false">array</type>
          </tag>
          <tag line="245" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="245" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="245" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$header</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="245">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="245">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="306" package="Slim">
        <name>deleteCookieHeader</name>
        <full_name>deleteCookieHeader</full_name>
        <docblock line="306">
          <description><![CDATA[Delete HTTP cookie header]]></description>
          <long-description><![CDATA[<p>This method will construct and set the HTTP <code>Set-Cookie</code> header to invalidate
a client-side HTTP cookie. If a cookie with the same name (and, optionally, domain)
is already set in the HTTP response, it will also be removed. Slim uses this method
instead of PHP's native <code>setcookie</code> method. This allows more control of the HTTP header
irrespective of PHP's native implementation's dependency on PHP versions.</p>

<p>This method accepts the Slim_Http_Headers object by reference as its
first argument; this method directly modifies this object instead of
returning a value.</p>]]></long-description>
          <tag line="306" name="param" description="" type="array" variable="$header">
            <type by_reference="false">array</type>
          </tag>
          <tag line="306" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="306" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="306" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="306">
          <name>$header</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="306">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="306">
          <name>$value</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="342" package="Slim">
        <name>parseCookieHeader</name>
        <full_name>parseCookieHeader</full_name>
        <docblock line="342">
          <description><![CDATA[Parse cookie header]]></description>
          <long-description><![CDATA[<p>This method will parse the HTTP requst's <code>Cookie</code> header
and extract cookies into an associative array.</p>]]></long-description>
          <tag line="342" name="param" description="string" type="" variable="$header"/>
          <tag line="342" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="342">
          <name>$header</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="369" package="Slim">
        <name>get_iv</name>
        <full_name>get_iv</full_name>
        <docblock line="369">
          <description><![CDATA[Generate a random IV]]></description>
          <long-description><![CDATA[<p>This method will generate a non-predictable IV for use with
the cookie encryption</p>]]></long-description>
          <tag line="369" name="param" description="The UNIX timestamp at which this cookie will expire" type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="369" name="param" description="The secret key used to hash the cookie value" type="string" variable="$secret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="369" name="return" description="string with length 40" type="\binary">
            <type by_reference="false">\binary</type>
          </tag>
        </docblock>
        <argument line="369">
          <name>$expires</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="369">
          <name>$secret</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="55" code="50015">Argument $rawData is missing from the Docblock of stripSlashesIfMagicQuotes()</error>
      <error line="55" code="50015">Argument $overrideStripSlashes is missing from the Docblock of stripSlashesIfMagicQuotes()</error>
      <notice line="184" code="50013">Parameter  could not be found in encodeSecureCookie()</notice>
      <error line="209" code="50014">Name of argument $secret does not match with the DocBlock's name $expires in decodeSecureCookie()</error>
      <error line="209" code="50014">Name of argument $algorithm does not match with the DocBlock's name $secret in decodeSecureCookie()</error>
      <error line="209" code="50014">Name of argument $mode does not match with the DocBlock's name $algorithm in decodeSecureCookie()</error>
      <notice line="209" code="50013">Parameter $expires could not be found in decodeSecureCookie()</notice>
      <notice line="209" code="50013">Parameter  could not be found in decodeSecureCookie()</notice>
    </parse_markers>
  </file>
  <file path="admin\Slim\Log.php" hash="791311c2466145d995125f7def587dc7" package="Default">
    <class final="false" abstract="false" namespace="" line="56" package="Slim">
      <extends/>
      <name>Slim_Log</name>
      <full_name>\Slim_Log</full_name>
      <docblock line="56">
        <description><![CDATA[Log]]></description>
        <long-description><![CDATA[<p>This is the primary logger for a Slim application. You may provide
a Log Writer in conjunction with this Log to write to various output
destinations (e.g. a file). This class provides this interface:</p>

<p>debug( mixed $object )
info( mixed $object )
warn( mixed $object )
error( mixed $object )
fatal( mixed $object )</p>

<p>This class assumes only that your Log Writer has a public <code>write()</code> method
that accepts any object as its one and only argument. The Log Writer
class may write or send its argument anywhere: a file, STDERR,
a remote web API, etc. The possibilities are endless.</p>]]></long-description>
        <tag line="56" name="package" description="Slim"/>
        <tag line="56" name="author" description="Josh Lockhart"/>
        <tag line="56" name="since" description="1.0.0"/>
      </docblock>
      <constant namespace="" line="57" package="Slim">
        <name>FATAL</name>
        <full_name>FATAL</full_name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="" line="58" package="Slim">
        <name>ERROR</name>
        <full_name>ERROR</full_name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="" line="59" package="Slim">
        <name>WARN</name>
        <full_name>WARN</full_name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="" line="60" package="Slim">
        <name>INFO</name>
        <full_name>INFO</full_name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="" line="61" package="Slim">
        <name>DEBUG</name>
        <full_name>DEBUG</full_name>
        <value><![CDATA[4]]></value>
      </constant>
      <property final="false" static="true" visibility="protected" line="66" namespace="" package="Default">
        <name>$levels</name>
        <default><![CDATA[array(0 => 'FATAL', 1 => 'ERROR', 2 => 'WARN', 3 => 'INFO', 4 => 'DEBUG')]]></default>
        <docblock line="66">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" namespace="" package="Default">
        <name>$writer</name>
        <default><![CDATA[]]></default>
        <docblock line="77">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" namespace="" package="Default">
        <name>$enabled</name>
        <default><![CDATA[]]></default>
        <docblock line="82">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="87" namespace="" package="Default">
        <name>$level</name>
        <default><![CDATA[]]></default>
        <docblock line="87">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="94" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="94">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="param" description="" type="mixed" variable="$writer">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="94" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$writer</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="104" package="Slim">
        <name>getEnabled</name>
        <full_name>getEnabled</full_name>
        <docblock line="104">
          <description><![CDATA[Is logging enabled?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="113" package="Slim">
        <name>setEnabled</name>
        <full_name>setEnabled</full_name>
        <docblock line="113">
          <description><![CDATA[Enable or disable logging]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="" type="bool" variable="$enabled">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="113" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$enabled</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="127" package="Slim">
        <name>setLevel</name>
        <full_name>setLevel</full_name>
        <docblock line="127">
          <description><![CDATA[Set level]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
          <tag line="127" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="127" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$level</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="138" package="Slim">
        <name>getLevel</name>
        <full_name>getLevel</full_name>
        <docblock line="138">
          <description><![CDATA[Get level]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="147" package="Slim">
        <name>setWriter</name>
        <full_name>setWriter</full_name>
        <docblock line="147">
          <description><![CDATA[Set writer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="" type="mixed" variable="$writer">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$writer</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="155" package="Slim">
        <name>getWriter</name>
        <full_name>getWriter</full_name>
        <docblock line="155">
          <description><![CDATA[Get writer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="155" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="163" package="Slim">
        <name>isEnabled</name>
        <full_name>isEnabled</full_name>
        <docblock line="163">
          <description><![CDATA[Is logging enabled?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="172" package="Slim">
        <name>debug</name>
        <full_name>debug</full_name>
        <docblock line="172">
          <description><![CDATA[Log debug message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="172" name="return" description="What the Logger returns, or false if Logger not set or not enabled" type="mixed|false">
            <type by_reference="false">mixed</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="181" package="Slim">
        <name>info</name>
        <full_name>info</full_name>
        <docblock line="181">
          <description><![CDATA[Log info message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="181" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="181" name="return" description="What the Logger returns, or false if Logger not set or not enabled" type="mixed|false">
            <type by_reference="false">mixed</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="190" package="Slim">
        <name>warn</name>
        <full_name>warn</full_name>
        <docblock line="190">
          <description><![CDATA[Log warn message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="190" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="190" name="return" description="What the Logger returns, or false if Logger not set or not enabled" type="mixed|false">
            <type by_reference="false">mixed</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="Slim">
        <name>error</name>
        <full_name>error</full_name>
        <docblock line="199">
          <description><![CDATA[Log error message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="199" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="199" name="return" description="What the Logger returns, or false if Logger not set or not enabled" type="mixed|false">
            <type by_reference="false">mixed</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="199">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="208" package="Slim">
        <name>fatal</name>
        <full_name>fatal</full_name>
        <docblock line="208">
          <description><![CDATA[Log fatal message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="208" name="return" description="What the Logger returns, or false if Logger not set or not enabled" type="mixed|false">
            <type by_reference="false">mixed</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="218" package="Slim">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="218">
          <description><![CDATA[Log message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="218" name="param" description="The object to log" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="218" name="param" description="The message level" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
          <tag line="218" name="return" description="" type="int|false">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="218">
          <name>$level</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="66" code="50019">No short description for property $levels</critical>
      <critical line="77" code="50019">No short description for property $writer</critical>
      <critical line="82" code="50019">No short description for property $enabled</critical>
      <critical line="87" code="50019">No short description for property $level</critical>
    </parse_markers>
  </file>
  <file path="admin\Slim\LogWriter.php" hash="d3a9912b601a389d120defd6f124e3e1" package="Default">
    <class final="false" abstract="false" namespace="" line="44" package="Slim">
      <extends/>
      <name>Slim_LogWriter</name>
      <full_name>\Slim_LogWriter</full_name>
      <docblock line="44">
        <description><![CDATA[Log Writer]]></description>
        <long-description><![CDATA[<p>This class is used by Slim_Log to write log messages to a valid, writable
resource handle (e.g. a file or STDERR).</p>]]></long-description>
        <tag line="44" name="package" description="Slim"/>
        <tag line="44" name="author" description="Josh Lockhart"/>
        <tag line="44" name="since" description="1.5.2"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="48" namespace="" package="Default">
        <name>$resource</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="56" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="56">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="56" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$resource</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="69" package="Slim">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="69">
          <description><![CDATA[Write message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="" type="mixed" variable="$message">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="69" name="param" description="" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
          <tag line="69" name="return" description="" type="int|false">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="69">
          <name>$level</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="48" code="50019">No short description for property $resource</critical>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware\ContentTypes.php" hash="9c5d76310d7327f9a44370aee6b1347e" package="Default">
    <class final="false" abstract="false" namespace="" line="47" package="Slim">
      <extends>Slim_Middleware</extends>
      <name>Slim_Middleware_ContentTypes</name>
      <full_name>\Slim_Middleware_ContentTypes</full_name>
      <docblock line="47">
        <description><![CDATA[Content Types]]></description>
        <long-description><![CDATA[<p>This is middleware for a Slim application that intercepts
the HTTP request body and parses it into the appropriate
PHP data structure if possible; else it returns the HTTP
request body unchanged. This is particularly useful
for preparing the HTTP request body for an XML or JSON API.</p>]]></long-description>
        <tag line="47" name="package" description="Slim"/>
        <tag line="47" name="author" description="Josh Lockhart"/>
        <tag line="47" name="since" description="1.5.2"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" namespace="" package="Default">
        <name>$contentTypes</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="57" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="57">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="70" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="70">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="90" package="Slim">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="90">
          <description><![CDATA[Parse input]]></description>
          <long-description><![CDATA[<p>This method will attempt to parse the request body
based on its content type if available.</p>]]></long-description>
          <tag line="90" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="" type="string" variable="$contentType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="90">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="109" package="Slim">
        <name>parseJson</name>
        <full_name>parseJson</full_name>
        <docblock line="109">
          <description><![CDATA[Parse JSON]]></description>
          <long-description><![CDATA[<p>This method converts the raw JSON input
into an associative array.</p>]]></long-description>
          <tag line="109" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="109" name="return" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="129" package="Slim">
        <name>parseXml</name>
        <full_name>parseXml</full_name>
        <docblock line="129">
          <description><![CDATA[Parse XML]]></description>
          <long-description><![CDATA[<p>This method creates a SimpleXMLElement
based upon the XML input. If the SimpleXML
extension is not available, the raw input
will be returned unchanged.</p>]]></long-description>
          <tag line="129" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="129" name="return" description="" type="\SimpleXMLElement|string">
            <type by_reference="false">\SimpleXMLElement</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="147" package="Slim">
        <name>parseCsv</name>
        <full_name>parseCsv</full_name>
        <docblock line="147">
          <description><![CDATA[Parse CSV]]></description>
          <long-description><![CDATA[<p>This method parses CSV content into a numeric array
containing an array of data for each CSV line.</p>]]></long-description>
          <tag line="147" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="51" code="50019">No short description for property $contentTypes</critical>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware\Flash.php" hash="51c9b5f13ee220d99208dc40543aecd6" package="Default">
    <class final="false" abstract="false" namespace="" line="47" package="Slim">
      <extends>Slim_Middleware</extends>
      <implements>ArrayAccess</implements>
      <name>Slim_Middleware_Flash</name>
      <full_name>\Slim_Middleware_Flash</full_name>
      <docblock line="47">
        <description><![CDATA[Flash]]></description>
        <long-description><![CDATA[<p>This is middleware for a Slim application that enables
Flash messaging between HTTP requests. This allows you
set Flash messages for the current request, for the next request,
or to retain messages from the previous request through to
the next request.</p>]]></long-description>
        <tag line="47" name="package" description="Slim"/>
        <tag line="47" name="author" description="Josh Lockhart"/>
        <tag line="47" name="since" description="1.5.2"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" namespace="" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" namespace="" package="Default">
        <name>$messages</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="64" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="64">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="param" description="" type="\Slim" variable="$app">
            <type by_reference="false">\Slim</type>
          </tag>
          <tag line="64" name="param" description="" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="77">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="97" package="Slim">
        <name>now</name>
        <full_name>now</full_name>
        <docblock line="97">
          <description><![CDATA[Now]]></description>
          <long-description><![CDATA[<p>Specify a flash message for a given key to be shown for the current request</p>]]></long-description>
          <tag line="97" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="97">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="110" package="Slim">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="110">
          <description><![CDATA[Set]]></description>
          <long-description><![CDATA[<p>Specify a flash message for a given key to be shown for the next request</p>]]></long-description>
          <tag line="110" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="110">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="121" package="Slim">
        <name>keep</name>
        <full_name>keep</full_name>
        <docblock line="121">
          <description><![CDATA[Keep]]></description>
          <long-description><![CDATA[<p>Retain flash messages from the previous request for the next request</p>]]></long-description>
          <tag line="121" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="130" package="Slim">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="130">
          <description><![CDATA[Save]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="139" package="Slim">
        <name>loadMessages</name>
        <full_name>loadMessages</full_name>
        <docblock line="139">
          <description><![CDATA[Load messages]]></description>
          <long-description><![CDATA[<p>Load messages from previous request if available</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="152" package="Slim">
        <name>getMessages</name>
        <full_name>getMessages</full_name>
        <docblock line="152">
          <description><![CDATA[Get messages]]></description>
          <long-description><![CDATA[<p>Return array of flash messages to be shown for the current request</p>]]></long-description>
          <tag line="152" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="159" package="Slim">
        <name>offsetExists</name>
        <full_name>offsetExists</full_name>
        <docblock line="159">
          <description><![CDATA[Array Access: Offset Exists]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="159">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="167" package="Slim">
        <name>offsetGet</name>
        <full_name>offsetGet</full_name>
        <docblock line="167">
          <description><![CDATA[Array Access: Offset Get]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="167">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="175" package="Slim">
        <name>offsetSet</name>
        <full_name>offsetSet</full_name>
        <docblock line="175">
          <description><![CDATA[Array Access: Offset Set]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="175">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="175">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="182" package="Slim">
        <name>offsetUnset</name>
        <full_name>offsetUnset</full_name>
        <docblock line="182">
          <description><![CDATA[Array Access: Offset Unset]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="182">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="51" code="50019">No short description for property $settings</critical>
      <critical line="56" code="50019">No short description for property $messages</critical>
      <error line="64" code="50014">Name of argument $settings does not match with the DocBlock's name $app in __construct()</error>
      <notice line="64" code="50013">Parameter $app could not be found in __construct()</notice>
      <error line="159" code="50015">Argument $offset is missing from the Docblock of offsetExists()</error>
      <error line="167" code="50015">Argument $offset is missing from the Docblock of offsetGet()</error>
      <error line="175" code="50015">Argument $offset is missing from the Docblock of offsetSet()</error>
      <error line="175" code="50015">Argument $value is missing from the Docblock of offsetSet()</error>
      <error line="182" code="50015">Argument $offset is missing from the Docblock of offsetUnset()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware\MethodOverride.php" hash="6588cf77701ea498d04bf504a4dc6a07" package="Default">
    <class final="false" abstract="false" namespace="" line="48" package="Slim">
      <extends>Slim_Middleware</extends>
      <name>Slim_Middleware_MethodOverride</name>
      <full_name>\Slim_Middleware_MethodOverride</full_name>
      <docblock line="48">
        <description><![CDATA[HTTP Method Override]]></description>
        <long-description><![CDATA[<p>This is middleware for a Slim application that allows traditional
desktop browsers to submit psuedo PUT and DELETE requests by relying
on a pre-determined request parameter. Without this middleware,
desktop browsers are only able to submit GET and POST requests.</p>

<p>This middleware is included automatically!</p>]]></long-description>
        <tag line="48" name="package" description="Slim"/>
        <tag line="48" name="author" description="Josh Lockhart"/>
        <tag line="48" name="since" description="1.5.2"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="52" namespace="" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="60" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="60">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\Slim" variable="$app">
            <type by_reference="false">\Slim</type>
          </tag>
          <tag line="60" name="param" description="" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="76" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="76">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[<p>Implements Slim middleware interface. This method is invoked and passed
an array of environemnt variables. This middleware inspects the environment
variables for the HTTP method override parameter; if found, this middleware
modifies the environment settings so downstream middleware and/or the Slim
application will treat the request with the desired HTTP method.</p>]]></long-description>
          <tag line="76" name="param" description="" type="array" variable="$env">
            <type by_reference="false">array</type>
          </tag>
          <tag line="76" name="return" description="header, body]" type="\array[status,">
            <type by_reference="false">\array[status,</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="52" code="50019">No short description for property $settings</critical>
      <error line="60" code="50014">Name of argument $settings does not match with the DocBlock's name $app in __construct()</error>
      <notice line="60" code="50013">Parameter $app could not be found in __construct()</notice>
      <notice line="76" code="50013">Parameter $env could not be found in call()</notice>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware\PrettyExceptions.php" hash="a7bc680fc8fffe324a8309833878a27b" package="Default">
    <class final="false" abstract="false" namespace="" line="44" package="Slim">
      <extends>Slim_Middleware</extends>
      <name>Slim_Middleware_PrettyExceptions</name>
      <full_name>\Slim_Middleware_PrettyExceptions</full_name>
      <docblock line="44">
        <description><![CDATA[Pretty Exceptions]]></description>
        <long-description><![CDATA[<p>This middleware catches any Exception thrown by the surrounded
application and displays a developer-friendly diagnostic screen.</p>]]></long-description>
        <tag line="44" name="package" description="Slim"/>
        <tag line="44" name="author" description="Josh Lockhart"/>
        <tag line="44" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="48" namespace="" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="55">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\Slim|\middleware" variable="$app">
            <type by_reference="false">\Slim</type>
            <type by_reference="false">\middleware</type>
          </tag>
          <tag line="55" name="param" description="" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="63" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="63">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="80" package="Slim">
        <name>renderBody</name>
        <full_name>renderBody</full_name>
        <docblock line="80">
          <description><![CDATA[Render response body]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="array" variable="$env">
            <type by_reference="false">array</type>
          </tag>
          <tag line="80" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="80" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$env</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="80">
          <name>$exception</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="48" code="50019">No short description for property $settings</critical>
      <error line="55" code="50014">Name of argument $settings does not match with the DocBlock's name $app in __construct()</error>
      <notice line="55" code="50013">Parameter $app could not be found in __construct()</notice>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware\SessionCookie.php" hash="a02b5349073751e3c5f33c2cda317b88" package="Default">
    <class final="false" abstract="false" namespace="" line="60" package="Slim">
      <extends>Slim_Middleware</extends>
      <name>Slim_Middleware_SessionCookie</name>
      <full_name>\Slim_Middleware_SessionCookie</full_name>
      <docblock line="60">
        <description><![CDATA[Session Cookie]]></description>
        <long-description><![CDATA[<p>This class provides an HTTP cookie storage mechanism
for session data. This class avoids using a PHP session
and instead serializes/unserializes the $_SESSION global
variable to/from an HTTP cookie.</p>

<p>If a secret key is provided with this middleware, the HTTP
cookie will be checked for integrity to ensure the client-side
cookie is not changed.</p>

<p>You should NEVER store sensitive data in a client-side cookie
in any format, encrypted or not. If you need to store sensitive
user information in a session, you should rely on PHP's native
session implementation, or use other middleware to store
session data in a database or alternative server-side cache.</p>

<p>Because this class stores serialized session data in an HTTP cookie,
you are inherently limtied to 4 Kb. If you attempt to store
more than this amount, serialization will fail.</p>]]></long-description>
        <tag line="60" name="package" description="Slim"/>
        <tag line="60" name="author" description="Josh Lockhart"/>
        <tag line="60" name="since" description="1.5.2"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="64" namespace="" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="72" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="72">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$settings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="112" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="112">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="123" package="Slim">
        <name>loadSession</name>
        <full_name>loadSession</full_name>
        <docblock line="123">
          <description><![CDATA[Load session]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="param" description="" type="array" variable="$env">
            <type by_reference="false">array</type>
          </tag>
          <tag line="123" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="142" package="Slim">
        <name>saveSession</name>
        <full_name>saveSession</full_name>
        <docblock line="142">
          <description><![CDATA[Save session]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="168" package="Slim">
        <name>open</name>
        <full_name>open</full_name>
        <docblock line="168">
          <description><![CDATA[Session Handler Stubs]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="168">
          <name>$savePath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$sessionName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="172" package="Slim">
        <name>close</name>
        <full_name>close</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="176" package="Slim">
        <name>read</name>
        <full_name>read</full_name>
        <argument line="176">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="180" package="Slim">
        <name>write</name>
        <full_name>write</full_name>
        <argument line="180">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="180">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="184" package="Slim">
        <name>destroy</name>
        <full_name>destroy</full_name>
        <argument line="184">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="188" package="Slim">
        <name>gc</name>
        <full_name>gc</full_name>
        <argument line="188">
          <name>$maxlifetime</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="64" code="50019">No short description for property $settings</critical>
      <notice line="123" code="50013">Parameter $env could not be found in loadSession()</notice>
      <error line="168" code="50015">Argument $savePath is missing from the Docblock of open()</error>
      <error line="168" code="50015">Argument $sessionName is missing from the Docblock of open()</error>
      <error line="172" code="50010">No DocBlock was found for method close()</error>
      <error line="176" code="50010">No DocBlock was found for method read()</error>
      <error line="180" code="50010">No DocBlock was found for method write()</error>
      <error line="184" code="50010">No DocBlock was found for method destroy()</error>
      <error line="188" code="50010">No DocBlock was found for method gc()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Middleware.php" hash="c6ff1a83264912d286077964bef3dcd0" package="Default">
    <class final="false" abstract="false" namespace="" line="41" package="Slim">
      <extends/>
      <name>Slim_Middleware</name>
      <full_name>\Slim_Middleware</full_name>
      <docblock line="41">
        <description><![CDATA[Middleware]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="41" name="package" description="Slim"/>
        <tag line="41" name="author" description="Josh Lockhart"/>
        <tag line="41" name="since" description="1.6.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" namespace="" package="Default">
        <name>$app</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="Reference to the primary Slim application instance" type="\Slim">
            <type by_reference="false">\Slim</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" namespace="" package="Default">
        <name>$next</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="Reference to the next downstream middleware" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="true" abstract="false" static="false" visibility="public" namespace="" line="61" package="Slim">
        <name>setApplication</name>
        <full_name>setApplication</full_name>
        <docblock line="61">
          <description><![CDATA[Set application]]></description>
          <long-description><![CDATA[<p>This method injects the primary Slim application instance into
this middleware.</p>]]></long-description>
          <tag line="61" name="param" description="" type="\Slim" variable="$application">
            <type by_reference="false">\Slim</type>
          </tag>
          <tag line="61" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$application</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="" line="73" package="Slim">
        <name>getApplication</name>
        <full_name>getApplication</full_name>
        <docblock line="73">
          <description><![CDATA[Get application]]></description>
          <long-description><![CDATA[<p>This method retrieves the application previously injected
into this middleware.</p>]]></long-description>
          <tag line="73" name="return" description="" type="\Slim">
            <type by_reference="false">\Slim</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="" line="87" package="Slim">
        <name>setNextMiddleware</name>
        <full_name>setNextMiddleware</full_name>
        <docblock line="87">
          <description><![CDATA[Set next middleware]]></description>
          <long-description><![CDATA[<p>This method injects the next downstream middleware into
this middleware so that it may optionally be called
when appropriate.</p>]]></long-description>
          <tag line="87" name="param" description="Slim|Slim_Middleware" type="" variable="$nextMiddleware"/>
          <tag line="87" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$nextMiddleware</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="" line="99" package="Slim">
        <name>getNextMiddleware</name>
        <full_name>getNextMiddleware</full_name>
        <docblock line="99">
          <description><![CDATA[Get next middleware]]></description>
          <long-description><![CDATA[<p>This method retrieves the next downstream middleware
previously injected into this middleware.</p>]]></long-description>
          <tag line="99" name="return" description="" type="\Slim|\Slim_Middleware">
            <type by_reference="false">\Slim</type>
            <type by_reference="false">\Slim_Middleware</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="" line="111" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="111">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[<p>Perform actions specific to this middleware and optionally
call the next downstream middleware.</p>]]></long-description>
          <tag line="111" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="45" code="50019">No short description for property $app</critical>
      <critical line="50" code="50019">No short description for property $next</critical>
    </parse_markers>
  </file>
  <file path="admin\Slim\Route.php" hash="af532894c2599b87603ae23e99a5dd77" package="Default">
    <class final="false" abstract="false" namespace="" line="40" package="Slim">
      <extends/>
      <name>Slim_Route</name>
      <full_name>\Slim_Route</full_name>
      <docblock line="40">
        <description><![CDATA[Route]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="40" name="package" description="Slim"/>
        <tag line="40" name="author" description="Josh Lockhart"/>
        <tag line="40" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" namespace="" package="Default">
        <name>$pattern</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="The route pattern (ie. &quot;/books/:id&quot;)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" namespace="" package="Default">
        <name>$callable</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="The callable associated with this route" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" namespace="" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="54">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="Conditions for this route's URL parameters" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="59" namespace="" package="Default">
        <name>$defaultConditions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="Default conditions applied to all Route instances" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" namespace="" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="The name of this route (optional)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" namespace="" package="Default">
        <name>$params</name>
        <default><![CDATA[array()]]></default>
        <docblock line="69">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="var" description="Key-value array of URL parameters" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" namespace="" package="Default">
        <name>$methods</name>
        <default><![CDATA[array()]]></default>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="HTTP methods supported by this Route" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" namespace="" package="Default">
        <name>$router</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="The Router to which this Route belongs" type="\Slim_Router">
            <type by_reference="false">\Slim_Router</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" namespace="" package="Default">
        <name>$middleware</name>
        <default><![CDATA[array()]]></default>
        <docblock line="84">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="var" description="Middleware" type="\array[Callable]">
            <type by_reference="false">\array[Callable]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="91" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="91">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="param" description="The URL pattern (ie. &quot;/books/:id&quot;)" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="param" description="Anything that returns TRUE for is_callable()" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$pattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$callable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="102" package="Slim">
        <name>setDefaultConditions</name>
        <full_name>setDefaultConditions</full_name>
        <docblock line="102">
          <description><![CDATA[Set default route conditions for all instances]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="" type="array" variable="$defaultConditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="102" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$defaultConditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="110" package="Slim">
        <name>getDefaultConditions</name>
        <full_name>getDefaultConditions</full_name>
        <docblock line="110">
          <description><![CDATA[Get default route conditions for all instances]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="118" package="Slim">
        <name>getPattern</name>
        <full_name>getPattern</full_name>
        <docblock line="118">
          <description><![CDATA[Get route pattern]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="127" package="Slim">
        <name>setPattern</name>
        <full_name>setPattern</full_name>
        <docblock line="127">
          <description><![CDATA[Set route pattern]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$pattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="135" package="Slim">
        <name>getCallable</name>
        <full_name>getCallable</full_name>
        <docblock line="135">
          <description><![CDATA[Get route callable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="144" package="Slim">
        <name>setCallable</name>
        <full_name>setCallable</full_name>
        <docblock line="144">
          <description><![CDATA[Set route callable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="param" description="" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$callable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="152" package="Slim">
        <name>getConditions</name>
        <full_name>getConditions</full_name>
        <docblock line="152">
          <description><![CDATA[Get route conditions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="161" package="Slim">
        <name>setConditions</name>
        <full_name>setConditions</full_name>
        <docblock line="161">
          <description><![CDATA[Set route conditions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="param" description="" type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="161" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="169" package="Slim">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="169">
          <description><![CDATA[Get route name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="178" package="Slim">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="178">
          <description><![CDATA[Set route name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="178" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="187" package="Slim">
        <name>getParams</name>
        <full_name>getParams</full_name>
        <docblock line="187">
          <description><![CDATA[Get route parameters]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="195" package="Slim">
        <name>setHttpMethods</name>
        <full_name>setHttpMethods</full_name>
        <docblock line="195">
          <description><![CDATA[Add supported HTTP method(s)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="195" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="204" package="Slim">
        <name>getHttpMethods</name>
        <full_name>getHttpMethods</full_name>
        <docblock line="204">
          <description><![CDATA[Get supported HTTP methods]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="204" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="212" package="Slim">
        <name>appendHttpMethods</name>
        <full_name>appendHttpMethods</full_name>
        <docblock line="212">
          <description><![CDATA[Append supported HTTP methods]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="212" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="221" package="Slim">
        <name>via</name>
        <full_name>via</full_name>
        <docblock line="221">
          <description><![CDATA[Append supported HTTP methods (alias for Route::appendHttpMethods)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="231" package="Slim">
        <name>supportsHttpMethod</name>
        <full_name>supportsHttpMethod</full_name>
        <docblock line="231">
          <description><![CDATA[Detect support for an HTTP method]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="239" package="Slim">
        <name>getRouter</name>
        <full_name>getRouter</full_name>
        <docblock line="239">
          <description><![CDATA[Get router]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="239" name="return" description="" type="\Slim_Router">
            <type by_reference="false">\Slim_Router</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="248" package="Slim">
        <name>setRouter</name>
        <full_name>setRouter</full_name>
        <docblock line="248">
          <description><![CDATA[Set router]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="248" name="param" description="" type="\Slim_Router" variable="$router">
            <type by_reference="false">\Slim_Router</type>
          </tag>
          <tag line="248" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$router</name>
          <default><![CDATA[]]></default>
          <type>Slim_Router</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="256" package="Slim">
        <name>getMiddleware</name>
        <full_name>getMiddleware</full_name>
        <docblock line="256">
          <description><![CDATA[Get middleware]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="256" name="return" description="" type="\array[Callable]">
            <type by_reference="false">\array[Callable]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="275" package="Slim">
        <name>setMiddleware</name>
        <full_name>setMiddleware</full_name>
        <docblock line="275">
          <description><![CDATA[Set middleware]]></description>
          <long-description><![CDATA[<p>This method allows middleware to be assigned to a specific Route.
If the method argument <code>is_callable</code> (including callable arrays!),
we directly append the argument to <code>$this-&gt;middleware</code>. Else, we
assume the argument is an array of callables and merge the array
with <code>$this-&gt;middleware</code>. Even if non-callables are included in the
argument array, we still merge them; we lazily check each item
against <code>is_callable</code> during Route::dispatch().</p>]]></long-description>
          <tag line="275" name="param" description="Callable|array[Callable]" type="" variable="$middleware"/>
          <tag line="275" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
          <tag line="275" name="throws" description="If argument is not callable or not an array" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$middleware</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="297" package="Slim">
        <name>matches</name>
        <full_name>matches</full_name>
        <docblock line="297">
          <description><![CDATA[Matches URI?]]></description>
          <long-description><![CDATA[<p>Parse this route's pattern, and then compare it to an HTTP resource URI
This method was modeled after the techniques demonstrated by Dan Sosedoff at:</p>

<p>http://blog.sosedoff.com/2009/09/20/rails-like-php-url-router/</p>]]></long-description>
          <tag line="297" name="param" description="A Request URI" type="string" variable="$resourceUri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="297" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$resourceUri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="329" package="Slim">
        <name>convertPatternToRegex</name>
        <full_name>convertPatternToRegex</full_name>
        <docblock line="329">
          <description><![CDATA[Convert a URL parameter (ie. ":id") into a regular expression]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="329" name="param" description="URL parameters" type="array" variable="$matches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="329" name="return" description="Regular expression for URL parameter" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="329">
          <name>$matches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="343" package="Slim">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="343">
          <description><![CDATA[Set route name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="343" name="param" description="The name of the route" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="353" package="Slim">
        <name>conditions</name>
        <full_name>conditions</full_name>
        <docblock line="353">
          <description><![CDATA[Merge route conditions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="353" name="param" description="Key-value array of URL parameter conditions" type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="353" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
        <argument line="353">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="379" package="Slim">
        <name>dispatch</name>
        <full_name>dispatch</full_name>
        <docblock line="379">
          <description><![CDATA[Dispatch route]]></description>
          <long-description><![CDATA[<p>This method invokes this route's callable. If middleware is
registered for this route, each callable middleware is invoked in
the order specified.</p>

<p>This method is smart about trailing slashes on the route pattern.
If this route's pattern is defined with a trailing slash, and if the
current request URI does not have a trailing slash but otherwise
matches this route's pattern, a Slim_Exception_RequestSlash
will be thrown triggering an HTTP 301 Permanent Redirect to the same
URI <em>with</em> a trailing slash. This Exception is caught in the
<code>Slim::run</code> loop. If this route's pattern is defined without a
trailing slash, and if the current request URI does have a trailing
slash, this route will not be matched and a 404 Not Found
response will be sent if no subsequent matching routes are found.</p>]]></long-description>
          <tag line="379" name="return" description="Was route callable invoked successfully?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="379" name="throws" description="" type="\Slim_Exception_RequestSlash">
            <type by_reference="false">\Slim_Exception_RequestSlash</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="44" code="50019">No short description for property $pattern</critical>
      <critical line="49" code="50019">No short description for property $callable</critical>
      <critical line="54" code="50019">No short description for property $conditions</critical>
      <critical line="59" code="50019">No short description for property $defaultConditions</critical>
      <critical line="64" code="50019">No short description for property $name</critical>
      <critical line="69" code="50019">No short description for property $params</critical>
      <critical line="74" code="50019">No short description for property $methods</critical>
      <critical line="79" code="50019">No short description for property $router</critical>
      <critical line="84" code="50019">No short description for property $middleware</critical>
      <error line="231" code="50015">Argument $method is missing from the Docblock of supportsHttpMethod()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Router.php" hash="9d66dca606087ff1fa2336403c8a9086" package="Default">
    <class final="false" abstract="false" namespace="" line="44" package="Slim">
      <extends/>
      <implements>Iterator</implements>
      <name>Slim_Router</name>
      <full_name>\Slim_Router</full_name>
      <docblock line="44">
        <description><![CDATA[Router]]></description>
        <long-description><![CDATA[<p>This class organizes Route objects and, upon request, will
return an iterator for routes that match the HTTP request URI.</p>]]></long-description>
        <tag line="44" name="package" description="Slim"/>
        <tag line="44" name="author" description="Josh Lockhart"/>
        <tag line="44" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="48" namespace="" package="Default">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="\Slim_Http_Request">
            <type by_reference="false">\Slim_Http_Request</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="" package="Default">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="" type="\Slim_Http_Response">
            <type by_reference="false">\Slim_Http_Response</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" namespace="" package="Default">
        <name>$routes</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="Lookup hash of all routes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="" package="Default">
        <name>$namedRoutes</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="Lookup hash of named routes, keyed by route name" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68" namespace="" package="Default">
        <name>$matchedRoutes</name>
        <default><![CDATA[]]></default>
        <docblock line="68">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="Array of routes that match the Request URI (lazy-loaded)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="" package="Default">
        <name>$notFound</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="Callable to be invoked if no matching routes are found" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" namespace="" package="Default">
        <name>$error</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="Callable to be invoked if application error" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="85" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="85">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="The HTTP request object" type="\Slim_Http_Request" variable="$request">
            <type by_reference="false">\Slim_Http_Request</type>
          </tag>
          <tag line="85" name="param" description="The HTTP response object" type="\Slim_Http_Response" variable="$response">
            <type by_reference="false">\Slim_Http_Response</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$request</name>
          <default><![CDATA[]]></default>
          <type>Slim_Http_Request</type>
        </argument>
        <argument line="85">
          <name>$response</name>
          <default><![CDATA[]]></default>
          <type>Slim_Http_Response</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="96" package="Slim">
        <name>getRequest</name>
        <full_name>getRequest</full_name>
        <docblock line="96">
          <description><![CDATA[Get Request]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="return" description="" type="\Slim_Http_Request">
            <type by_reference="false">\Slim_Http_Request</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="104" package="Slim">
        <name>getResponse</name>
        <full_name>getResponse</full_name>
        <docblock line="104">
          <description><![CDATA[Get Response]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="" type="\Slim_Http_Response">
            <type by_reference="false">\Slim_Http_Response</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="112" package="Slim">
        <name>getCurrentRoute</name>
        <full_name>getCurrentRoute</full_name>
        <docblock line="112">
          <description><![CDATA[Get Current Route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="return" description="" type="\Slim_Route|false">
            <type by_reference="false">\Slim_Route</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="120" package="Slim">
        <name>getMatchedRoutes</name>
        <full_name>getMatchedRoutes</full_name>
        <docblock line="120">
          <description><![CDATA[Return routes that match the current request]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="return" description="" type="\array[Slim_Route]">
            <type by_reference="false">\array[Slim_Route]</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$reload</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="138" package="Slim">
        <name>map</name>
        <full_name>map</full_name>
        <docblock line="138">
          <description><![CDATA[Map a route to a callback function]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="param" description="The URL pattern (ie. &quot;/books/:id&quot;)" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="param" description="Anything that returns TRUE for is_callable()" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="138" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$pattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="138">
          <name>$callable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="152" package="Slim">
        <name>urlFor</name>
        <full_name>urlFor</full_name>
        <docblock line="152">
          <description><![CDATA[Get URL for named route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="The name of the route" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="param" description="Associative array of URL parameter names and values" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="152" name="throws" description="If named route not found" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="152" name="return" description="The URL for the given route populated with the given parameters" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="152">
          <name>$params</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="177" package="Slim">
        <name>addNamedRoute</name>
        <full_name>addNamedRoute</full_name>
        <docblock line="177">
          <description><![CDATA[Add named route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="param" description="The route name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="param" description="The route object" type="\Slim_Route" variable="$route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
          <tag line="177" name="throws" description="If a named route already exists with the same name" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="177" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="177">
          <name>$route</name>
          <default><![CDATA[]]></default>
          <type>Slim_Route</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="189" package="Slim">
        <name>hasNamedRoute</name>
        <full_name>hasNamedRoute</full_name>
        <docblock line="189">
          <description><![CDATA[Has named route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="The route name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="189" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="198" package="Slim">
        <name>getNamedRoute</name>
        <full_name>getNamedRoute</full_name>
        <docblock line="198">
          <description><![CDATA[Get named route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="198" name="return" description="" type="\Slim_Route|null">
            <type by_reference="false">\Slim_Route</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="210" package="Slim">
        <name>getNamedRoutes</name>
        <full_name>getNamedRoutes</full_name>
        <docblock line="210">
          <description><![CDATA[Get named routes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="210" name="return" description="" type="\ArrayIterator">
            <type by_reference="false">\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="219" package="Slim">
        <name>notFound</name>
        <full_name>notFound</full_name>
        <docblock line="219">
          <description><![CDATA[Register a 404 Not Found callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="Anything that returns TRUE for is_callable()" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="219" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$callable</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="231" package="Slim">
        <name>error</name>
        <full_name>error</full_name>
        <docblock line="231">
          <description><![CDATA[Register a 500 Error callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="param" description="Anything that returns TRUE for is_callable()" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="231" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$callable</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="242" package="Slim">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="242">
          <description><![CDATA[Iterator Interface: Rewind]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="242" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="250" package="Slim">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="250">
          <description><![CDATA[Iterator Interface: Current]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="250" name="return" description="" type="\Slim_Route|false">
            <type by_reference="false">\Slim_Route</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="258" package="Slim">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="258">
          <description><![CDATA[Iterator Interface: Key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="258" name="return" description="" type="int|null">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="266" package="Slim">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="266">
          <description><![CDATA[Iterator Interface: Next]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="266" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="274" package="Slim">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="274">
          <description><![CDATA[Iterator Interface: Valid]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="274" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="48" code="50019">No short description for property $request</critical>
      <critical line="53" code="50019">No short description for property $response</critical>
      <critical line="58" code="50019">No short description for property $routes</critical>
      <critical line="63" code="50019">No short description for property $namedRoutes</critical>
      <critical line="68" code="50019">No short description for property $matchedRoutes</critical>
      <critical line="73" code="50019">No short description for property $notFound</critical>
      <critical line="78" code="50019">No short description for property $error</critical>
      <error line="120" code="50015">Argument $reload is missing from the Docblock of getMatchedRoutes()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\Slim.php" hash="672b4bbaa7010f1a3af163cc5b4b7f26" package="Default">
    <include line="142" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="" line="39" package="Default">
      <name>MCRYPT_RIJNDAEL_256</name>
      <full_name>\MCRYPT_RIJNDAEL_256</full_name>
      <value><![CDATA[0]]></value>
    </constant>
    <constant namespace="" line="42" package="Default">
      <name>MCRYPT_MODE_CBC</name>
      <full_name>\MCRYPT_MODE_CBC</full_name>
      <value><![CDATA[0]]></value>
    </constant>
    <class final="false" abstract="false" namespace="" line="64" package="Slim">
      <extends/>
      <name>Slim</name>
      <full_name>\Slim</full_name>
      <docblock line="64">
        <description><![CDATA[Slim]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="64" name="package" description="Slim"/>
        <tag line="64" name="author" description="Josh Lockhart"/>
        <tag line="64" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="68" namespace="" package="Default">
        <name>$apps</name>
        <default><![CDATA[array()]]></default>
        <docblock line="68">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="" type="\array[Slim]">
            <type by_reference="false">\array[Slim]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" namespace="" package="Default">
        <name>$environment</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="83" namespace="" package="Default">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <docblock line="83">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="var" description="" type="\Slim_Http_Request">
            <type by_reference="false">\Slim_Http_Request</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="88" namespace="" package="Default">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <docblock line="88">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="" type="\Slim_Http_Response">
            <type by_reference="false">\Slim_Http_Response</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="93" namespace="" package="Default">
        <name>$router</name>
        <default><![CDATA[]]></default>
        <docblock line="93">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="var" description="" type="\Slim_Router">
            <type by_reference="false">\Slim_Router</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="98" namespace="" package="Default">
        <name>$view</name>
        <default><![CDATA[]]></default>
        <docblock line="98">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="var" description="" type="\Slim_View">
            <type by_reference="false">\Slim_View</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="103" namespace="" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="103">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="108" namespace="" package="Default">
        <name>$mode</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="113" namespace="" package="Default">
        <name>$middleware</name>
        <default><![CDATA[]]></default>
        <docblock line="113">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="118" namespace="" package="Default">
        <name>$hooks</name>
        <default><![CDATA[array('slim.before' => array(array()), 'slim.before.router' => array(array()), 'slim.before.dispatch' => array(array()), 'slim.after.dispatch' => array(array()), 'slim.after.router' => array(array()), 'slim.after' => array(array()))]]></default>
        <docblock line="118">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="136" package="Slim">
        <name>autoload</name>
        <full_name>autoload</full_name>
        <docblock line="136">
          <description><![CDATA[Slim autoloader]]></description>
          <long-description><![CDATA[<p>Lazy-loads class files when a given class is first referenced.
Class files must exist in the same directory as this file and be named
the same as its class definition (excluding the dot and extension).</p>]]></long-description>
          <tag line="136" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="153" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="153">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="param" description="Key-Value array of application settings" type="array" variable="$userSettings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="153" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$userSettings</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="194" package="Slim">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="194">
          <description><![CDATA[Get Slim application instance by name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="194" name="param" description="The name of the Slim application to fetch" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="" type="\Slim|null">
            <type by_reference="false">\Slim</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$name</name>
          <default><![CDATA['default']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="203" package="Slim">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="203">
          <description><![CDATA[Set Slim application name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="203" name="param" description="The name of this Slim application" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="203" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="212" package="Slim">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="212">
          <description><![CDATA[Get Slim application name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="212" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="222" package="Slim">
        <name>getDefaultSettings</name>
        <full_name>getDefaultSettings</full_name>
        <docblock line="222">
          <description><![CDATA[Get default application settings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="269" package="Slim">
        <name>config</name>
        <full_name>config</full_name>
        <docblock line="269">
          <description><![CDATA[Configure Slim Settings]]></description>
          <long-description><![CDATA[<p>This method defines application settings and acts as a setter and a getter.</p>

<p>If only one argument is specified and that argument is a string, the value
of the setting identified by the first argument will be returned, or NULL if
that setting does not exist.</p>

<p>If only one argument is specified and that argument is an associative array,
the array will be merged into the existing application settings.</p>

<p>If two arguments are provided, the first argument is the name of the setting
to be created or updated, and the second argument is the setting value.</p>]]></long-description>
          <tag line="269" name="param" description="If a string, the name of the setting to set or retrieve. Else an associated array of setting names and values" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="269" name="param" description="If name is a string, the value of the setting identified by $name" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="269" name="return" description="The value of a setting if only one argument is a string" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="269">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="292" package="Slim">
        <name>getMode</name>
        <full_name>getMode</full_name>
        <docblock line="292">
          <description><![CDATA[Get application mode]]></description>
          <long-description><![CDATA[<p>This method determines the application mode. It first inspects the $_ENV
superglobal for key <code>SLIM_MODE</code>. If that is not found, it queries
the <code>getenv</code> function. Else, it uses the application <code>mode</code> setting.</p>]]></long-description>
          <tag line="292" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="320" package="Slim">
        <name>configureMode</name>
        <full_name>configureMode</full_name>
        <docblock line="320">
          <description><![CDATA[Configure Slim for a given mode]]></description>
          <long-description><![CDATA[<p>This method will immediately invoke the callable if
the specified mode matches the current application mode.
Otherwise, the callable is ignored. This should be called
only <em>after</em> you initialize your Slim app.</p>]]></long-description>
          <tag line="320" name="param" description="" type="string" variable="$mode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="320" name="param" description="" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="320" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$mode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="320">
          <name>$callable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="332" package="Slim">
        <name>getLog</name>
        <full_name>getLog</full_name>
        <docblock line="332">
          <description><![CDATA[Get application log]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="332" name="return" description="" type="\Slim_Log">
            <type by_reference="false">\Slim_Log</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="368" package="Slim">
        <name>mapRoute</name>
        <full_name>mapRoute</full_name>
        <docblock line="368">
          <description><![CDATA[Add GET|POST|PUT|DELETE route]]></description>
          <long-description><![CDATA[<p>Adds a new route to the router with associated callable. This
route will only be invoked when the HTTP request's method matches
this route's method.</p>

<p>ARGUMENTS:</p>

<p>First:       string  The URL pattern (REQUIRED)
In-Between:  mixed   Anything that returns TRUE for <code>is_callable</code> (OPTIONAL)
Last:        mixed   Anything that returns TRUE for <code>is_callable</code> (REQUIRED)</p>

<p>The first argument is required and must always be the
route pattern (ie. '/books/:id').</p>

<p>The last argument is required and must always be the callable object
to be invoked when the route matches an HTTP request.</p>

<p>You may also provide an unlimited number of in-between arguments;
each interior argument must be callable and will be invoked in the
order specified before the route's callable is invoked.</p>

<p>USAGE:</p>

<p>Slim::get('/foo'[, middleware, middleware, ...], callable);</p>]]></long-description>
          <tag line="368" name="param" description="(See notes above)" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="368" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
        <argument line="368">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="383" package="Slim">
        <name>map</name>
        <full_name>map</full_name>
        <docblock line="383">
          <description><![CDATA[Add generic route without associated HTTP method]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="383" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="383" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="393" package="Slim">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="393">
          <description><![CDATA[Add GET route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="393" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="393" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="403" package="Slim">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="403">
          <description><![CDATA[Add POST route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="403" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="403" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="413" package="Slim">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="413">
          <description><![CDATA[Add PUT route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="413" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="413" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="423" package="Slim">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="423">
          <description><![CDATA[Add DELETE route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="423" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="423" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="433" package="Slim">
        <name>options</name>
        <full_name>options</full_name>
        <docblock line="433">
          <description><![CDATA[Add OPTIONS route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="433" name="see" description="\Slim::mapRoute" refers="\Slim::mapRoute"/>
          <tag line="433" name="return" description="" type="\Slim_Route">
            <type by_reference="false">\Slim_Route</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="460" package="Slim">
        <name>notFound</name>
        <full_name>notFound</full_name>
        <docblock line="460">
          <description><![CDATA[Not Found Handler]]></description>
          <long-description><![CDATA[<p>This method defines or invokes the application-wide Not Found handler.
There are two contexts in which this method may be invoked:</p>

<ol>
<li>When declaring the handler:</li>
</ol>

<p>If the $callable parameter is not null and is callable, this
method will register the callable to be invoked when no
routes match the current HTTP request. It WILL NOT invoke the callable.</p>

<ol>
<li>When invoking the handler:</li>
</ol>

<p>If the $callable parameter is null, Slim assumes you want
to invoke an already-registered handler. If the handler has been
registered and is callable, it is invoked and sends a 404 HTTP Response
whose body is the output of the Not Found handler.</p>]]></long-description>
          <tag line="460" name="param" description="Anything that returns true for is_callable()" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="460" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="460">
          <name>$callable</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="499" package="Slim">
        <name>error</name>
        <full_name>error</full_name>
        <docblock line="499">
          <description><![CDATA[Error Handler]]></description>
          <long-description><![CDATA[<p>This method defines or invokes the application-wide Error handler.
There are two contexts in which this method may be invoked:</p>

<ol>
<li>When declaring the handler:</li>
</ol>

<p>If the $argument parameter is callable, this
method will register the callable to be invoked when an uncaught
Exception is detected, or when otherwise explicitly invoked.
The handler WILL NOT be invoked in this context.</p>

<ol>
<li>When invoking the handler:</li>
</ol>

<p>If the $argument parameter is not callable, Slim assumes you want
to invoke an already-registered handler. If the handler has been
registered and is callable, it is invoked and passed the caught Exception
as its one and only argument. The error handler's output is captured
into an output buffer and sent as the body of a 500 HTTP Response.</p>]]></long-description>
          <tag line="499" name="param" description="Callable|Exception" type="mixed" variable="$argument">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="499" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="499">
          <name>$argument</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="521" package="Slim">
        <name>callErrorHandler</name>
        <full_name>callErrorHandler</full_name>
        <docblock line="521">
          <description><![CDATA[Call error handler]]></description>
          <long-description><![CDATA[<p>This will invoke the custom or default error handler
and RETURN its output.</p>]]></long-description>
          <tag line="521" name="param" description="" type="\Exception|null" variable="$argument">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="521" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="521">
          <name>$argument</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="538" package="Slim">
        <name>environment</name>
        <full_name>environment</full_name>
        <docblock line="538">
          <description><![CDATA[Get a reference to the Environment object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="538" name="return" description="" type="\Slim_Environment">
            <type by_reference="false">\Slim_Environment</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="546" package="Slim">
        <name>request</name>
        <full_name>request</full_name>
        <docblock line="546">
          <description><![CDATA[Get the Request object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="546" name="return" description="" type="\Slim_Http_Request">
            <type by_reference="false">\Slim_Http_Request</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="554" package="Slim">
        <name>response</name>
        <full_name>response</full_name>
        <docblock line="554">
          <description><![CDATA[Get the Response object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="554" name="return" description="" type="\Slim_Http_Response">
            <type by_reference="false">\Slim_Http_Response</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="562" package="Slim">
        <name>router</name>
        <full_name>router</full_name>
        <docblock line="562">
          <description><![CDATA[Get the Router object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="562" name="return" description="" type="\Slim_Router">
            <type by_reference="false">\Slim_Router</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="581" package="Slim">
        <name>view</name>
        <full_name>view</full_name>
        <docblock line="581">
          <description><![CDATA[Get and/or set the View]]></description>
          <long-description><![CDATA[<p>This method declares the View to be used by the Slim application.
If the argument is a string, Slim will instantiate a new object
of the same class. If the argument is an instance of View or a subclass
of View, Slim will use the argument as the View.</p>

<p>If a View already exists and this method is called to create a
new View, data already set in the existing View will be
transferred to the new View.</p>]]></long-description>
          <tag line="581" name="param" description="The name or instance of a Slim_View class" type="string|\Slim_View" variable="$viewClass">
            <type by_reference="false">string</type>
            <type by_reference="false">\Slim_View</type>
          </tag>
          <tag line="581" name="return" description="" type="\Slim_View">
            <type by_reference="false">\Slim_View</type>
          </tag>
        </docblock>
        <argument line="581">
          <name>$viewClass</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="610" package="Slim">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="610">
          <description><![CDATA[Render a template]]></description>
          <long-description><![CDATA[<p>Call this method within a GET, POST, PUT, DELETE, NOT FOUND, or ERROR
callable to render a template whose output is appended to the
current HTTP response body. How the template is rendered is
delegated to the current View.</p>]]></long-description>
          <tag line="610" name="param" description="The name of the template passed into the View::render method" type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="610" name="param" description="Associative array of data made available to the View" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="610" name="param" description="The HTTP response status code to use (Optional)" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="610" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="610">
          <name>$template</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="610">
          <name>$data</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
        <argument line="610">
          <name>$status</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="636" package="Slim">
        <name>lastModified</name>
        <full_name>lastModified</full_name>
        <docblock line="636">
          <description><![CDATA[Set Last-Modified HTTP Response Header]]></description>
          <long-description><![CDATA[<p>Set the HTTP 'Last-Modified' header and stop if a conditional
GET request's <code>If-Modified-Since</code> header matches the last modified time
of the resource. The <code>time</code> argument is a UNIX timestamp integer value.
When the current request includes an 'If-Modified-Since' header that
matches the specified last modified time, the application will stop
and send a '304 Not Modified' response to the client.</p>]]></long-description>
          <tag line="636" name="param" description="The last modified UNIX timestamp" type="int" variable="$time">
            <type by_reference="false">int</type>
          </tag>
          <tag line="636" name="throws" description="Returns HTTP 304 Not Modified response if resource last modified time matches `If-Modified-Since` header" type="\SlimException">
            <type by_reference="false">\SlimException</type>
          </tag>
          <tag line="636" name="throws" description="If provided timestamp is not an integer" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="636" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="636">
          <name>$time</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="662" package="Slim">
        <name>etag</name>
        <full_name>etag</full_name>
        <docblock line="662">
          <description><![CDATA[Set ETag HTTP Response Header]]></description>
          <long-description><![CDATA[<p>Set the etag header and stop if the conditional GET request matches.
The <code>value</code> argument is a unique identifier for the current resource.
The <code>type</code> argument indicates whether the etag should be used as a strong or
weak cache validator.</p>

<p>When the current request includes an 'If-None-Match' header with
a matching etag, execution is immediately stopped. If the request
method is GET or HEAD, a '304 Not Modified' response is sent.</p>]]></long-description>
          <tag line="662" name="param" description="The etag value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="662" name="param" description="The type of etag to create; either &quot;strong&quot; or &quot;weak&quot;" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="662" name="throws" description="If provided type is invalid" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="662" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="662">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="662">
          <name>$type</name>
          <default><![CDATA['strong']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="694" package="Slim">
        <name>expires</name>
        <full_name>expires</full_name>
        <docblock line="694">
          <description><![CDATA[Set Expires HTTP response header]]></description>
          <long-description><![CDATA[<p>The <code>Expires</code> header tells the HTTP client the time at which
the current resource should be considered stale. At that time the HTTP
client will send a conditional GET request to the server; the server
may return a 200 OK if the resource has changed, else a 304 Not Modified
if the resource has not changed. The <code>Expires</code> header should be used in
conjunction with the <code>etag()</code> or <code>lastModified()</code> methods above.</p>]]></long-description>
          <tag line="694" name="param" description="If string, a time to be parsed by `strtotime()`; If int, a UNIX timestamp;" type="string|int" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="694" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="694">
          <name>$time</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="718" package="Slim">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="718">
          <description><![CDATA[Set a normal, unencrypted Cookie]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="718" name="param" description="The cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="The cookie value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="The duration of the cookie; If integer, should be UNIX timestamp; If string, converted to UNIX timestamp with `strtotime`;" type="int|string" variable="$time">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="The path on the server in which the cookie will be available on" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="The domain that the cookie is available to" type="string" variable="$domain">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="Indicates that the cookie should only be transmitted over a secure HTTPS connection to/from the client" type="bool" variable="$secure">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="718" name="param" description="When TRUE the cookie will be made accessible only through the HTTP protocol" type="bool" variable="$httponly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="718" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="718">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$time</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$path</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$domain</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$secure</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="718">
          <name>$httponly</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="739" package="Slim">
        <name>getCookie</name>
        <full_name>getCookie</full_name>
        <docblock line="739">
          <description><![CDATA[Get the value of a Cookie from the current HTTP Request]]></description>
          <long-description><![CDATA[<p>Return the value of a cookie from the current HTTP request,
or return NULL if cookie does not exist. Cookies created during
the current request will not be available until the next request.</p>]]></long-description>
          <tag line="739" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="739" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="739">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="758" package="Slim">
        <name>setEncryptedCookie</name>
        <full_name>setEncryptedCookie</full_name>
        <docblock line="758">
          <description><![CDATA[Set an encrypted Cookie]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="758" name="param" description="The cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="758" name="param" description="The cookie value" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="758" name="param" description="The duration of the cookie; If integer, should be UNIX timestamp; If string, converted to UNIX timestamp with `strtotime`;" type="mixed" variable="$expires">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="758" name="param" description="The path on the server in which the cookie will be available on" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="758" name="param" description="The domain that the cookie is available to" type="string" variable="$domain">
            <type by_reference="false">string</type>
          </tag>
          <tag line="758" name="param" description="Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client" type="bool" variable="$secure">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="758" name="param" description="When TRUE the cookie will be made accessible only through the HTTP protocol" type="bool" variable="$httponly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="758" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="758">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$expires</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$path</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$domain</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$secure</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="758">
          <name>$httponly</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="783" package="Slim">
        <name>getEncryptedCookie</name>
        <full_name>getEncryptedCookie</full_name>
        <docblock line="783">
          <description><![CDATA[Get the value of an encrypted Cookie from the current HTTP request]]></description>
          <long-description><![CDATA[<p>Return the value of an encrypted cookie from the current HTTP request,
or return NULL if cookie does not exist. Encrypted cookies created during
the current request will not be available until the next request.</p>]]></long-description>
          <tag line="783" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="783" name="return" description="" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="783">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="783">
          <name>$deleteIfInvalid</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="813" package="Slim">
        <name>deleteCookie</name>
        <full_name>deleteCookie</full_name>
        <docblock line="813">
          <description><![CDATA[Delete a Cookie (for both normal or encrypted Cookies)]]></description>
          <long-description><![CDATA[<p>Remove a Cookie from the client. This method will overwrite an existing Cookie
with a new, empty, auto-expiring Cookie. This method's arguments must match
the original Cookie's respective arguments for the original Cookie to be
removed. If any of this method's arguments are omitted or set to NULL, the
default Cookie setting values (set during Slim::init) will be used instead.</p>]]></long-description>
          <tag line="813" name="param" description="The cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="813" name="param" description="The path on the server in which the cookie will be available on" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="813" name="param" description="The domain that the cookie is available to" type="string" variable="$domain">
            <type by_reference="false">string</type>
          </tag>
          <tag line="813" name="param" description="Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client" type="bool" variable="$secure">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="813" name="param" description="When TRUE the cookie will be made accessible only through the HTTP protocol" type="bool" variable="$httponly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="813" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="813">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="813">
          <name>$path</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="813">
          <name>$domain</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="813">
          <name>$secure</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="813">
          <name>$httponly</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="834" package="Slim">
        <name>root</name>
        <full_name>root</full_name>
        <docblock line="834">
          <description><![CDATA[Get the absolute path to this Slim application's root directory]]></description>
          <long-description><![CDATA[<p>This method returns the absolute path to the Slim application's
directory. If the Slim application is installed in a public-accessible
sub-directory, the sub-directory path will be included. This method
will always return an absolute path WITH a trailing slash.</p>]]></long-description>
          <tag line="834" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="846" package="Slim">
        <name>cleanBuffer</name>
        <full_name>cleanBuffer</full_name>
        <docblock line="846">
          <description><![CDATA[Clean buffer]]></description>
          <long-description><![CDATA[<p>Clear the current output buffer to avoid sending invalid
body content to the HTTP client.</p>]]></long-description>
          <tag line="846" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="861" package="Slim">
        <name>stop</name>
        <full_name>stop</full_name>
        <docblock line="861">
          <description><![CDATA[Stop]]></description>
          <long-description><![CDATA[<p>The thrown exception will be caught in Slim::call()
and the response will be sent as is to the HTTP client.</p>]]></long-description>
          <tag line="861" name="throws" description="" type="\Slim_Exception_Stop">
            <type by_reference="false">\Slim_Exception_Stop</type>
          </tag>
          <tag line="861" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="878" package="Slim">
        <name>halt</name>
        <full_name>halt</full_name>
        <docblock line="878">
          <description><![CDATA[Halt]]></description>
          <long-description><![CDATA[<p>Stop the application and immediately send the response with a
specific status and body to the HTTP client. This may send any
type of response: info, success, redirect, client error, or server error.
If you need to render a template AND customize the response status,
use Slim::render() instead.</p>]]></long-description>
          <tag line="878" name="param" description="The HTTP response status" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="878" name="param" description="The HTTP response body" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="878" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="878">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="878">
          <name>$message</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="895" package="Slim">
        <name>pass</name>
        <full_name>pass</full_name>
        <docblock line="895">
          <description><![CDATA[Pass]]></description>
          <long-description><![CDATA[<p>The thrown exception is caught in Slim::call() causing
the current Router iteration to be ignored while continuing
to the subsequent Route if available. If no subsequent matching
routes are found, a 404 response will be sent to the client.</p>]]></long-description>
          <tag line="895" name="throws" description="" type="\Slim_Exception_Pass">
            <type by_reference="false">\Slim_Exception_Pass</type>
          </tag>
          <tag line="895" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="905" package="Slim">
        <name>contentType</name>
        <full_name>contentType</full_name>
        <docblock line="905">
          <description><![CDATA[Set the HTTP response Content-Type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="905" name="param" description="The Content-Type for the Response (ie. text/html)" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="905" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="905">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="914" package="Slim">
        <name>status</name>
        <full_name>status</full_name>
        <docblock line="914">
          <description><![CDATA[Set the HTTP response status code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="914" name="param" description="The HTTP response status code" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="914" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="914">
          <name>$code</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="925" package="Slim">
        <name>urlFor</name>
        <full_name>urlFor</full_name>
        <docblock line="925">
          <description><![CDATA[Get the URL for a named Route]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="925" name="param" description="The route name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="925" name="param" description="Key-value array of URL parameters" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="925" name="throws" description="If named route does not exist" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="925" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="925">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="925">
          <name>$params</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="943" package="Slim">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="943">
          <description><![CDATA[Redirect]]></description>
          <long-description><![CDATA[<p>This method immediately redirects to a new URL. By default,
this issues a 302 Found response; this is considered the default
generic redirect response. You may also specify another valid
3xx status code if you want. This method will automatically set the
HTTP Location header for you using the URL parameter and place the
destination URL into the response body.</p>]]></long-description>
          <tag line="943" name="param" description="The destination URL" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="943" name="param" description="The HTTP redirect status code (Optional)" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="943" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="943">
          <name>$url</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="943">
          <name>$status</name>
          <default><![CDATA[302]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="955" package="Slim">
        <name>flash</name>
        <full_name>flash</full_name>
        <docblock line="955">
          <description><![CDATA[Set flash message for subsequent request]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="955" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="955" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="955" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="955">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="955">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="967" package="Slim">
        <name>flashNow</name>
        <full_name>flashNow</full_name>
        <docblock line="967">
          <description><![CDATA[Set flash message for current request]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="967" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="967" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="967" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="967">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="967">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="977" package="Slim">
        <name>flashKeep</name>
        <full_name>flashKeep</full_name>
        <docblock line="977">
          <description><![CDATA[Keep flash messages from previous request for subsequent request]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="977" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="992" package="Slim">
        <name>hook</name>
        <full_name>hook</full_name>
        <docblock line="992">
          <description><![CDATA[Assign hook]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="992" name="param" description="The hook name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="992" name="param" description="A callable object" type="mixed" variable="$callable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="992" name="param" description="The hook priority; 0 = high, 10 = low" type="int" variable="$priority">
            <type by_reference="false">int</type>
          </tag>
          <tag line="992" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="992">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="992">
          <name>$callable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="992">
          <name>$priority</name>
          <default><![CDATA[10]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1007" package="Slim">
        <name>applyHook</name>
        <full_name>applyHook</full_name>
        <docblock line="1007">
          <description><![CDATA[Invoke hook]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1007" name="param" description="The hook name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1007" name="param" description="(Optional) Argument for hooked functions" type="mixed" variable="$hookArgs">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1007" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1007">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1007">
          <name>$hookArg</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1037" package="Slim">
        <name>getHooks</name>
        <full_name>getHooks</full_name>
        <docblock line="1037">
          <description><![CDATA[Get hook listeners]]></description>
          <long-description><![CDATA[<p>Return an array of registered hooks. If <code>$name</code> is a valid
hook name, only the listeners attached to that hook are returned.
Else, all listeners are returned as an associative array whose
keys are hook names and whose values are arrays of listeners.</p>]]></long-description>
          <tag line="1037" name="param" description="A hook name (Optional)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1037" name="return" description="" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="1037">
          <name>$name</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1055" package="Slim">
        <name>clearHooks</name>
        <full_name>clearHooks</full_name>
        <docblock line="1055">
          <description><![CDATA[Clear hook listeners]]></description>
          <long-description><![CDATA[<p>Clear all listeners for all hooks. If <code>$name</code> is
a valid hook name, only the listeners attached
to that hook will be cleared.</p>]]></long-description>
          <tag line="1055" name="param" description="A hook name (Optional)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1055" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1055">
          <name>$name</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1076" package="Slim">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="1076">
          <description><![CDATA[Add middleware]]></description>
          <long-description><![CDATA[<p>This method prepends new middleware to the application middleware stack.
The argument must be an instance that subclasses Slim_Middleware.</p>]]></long-description>
          <tag line="1076" name="param" description="Slim_Middleware" type="" variable="$newMiddleware"/>
          <tag line="1076" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1076">
          <name>$newMiddleware</name>
          <default><![CDATA[]]></default>
          <type>Slim_Middleware</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1093" package="Slim">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="1093">
          <description><![CDATA[Run]]></description>
          <long-description><![CDATA[<p>This method invokes the middleware stack, including the core Slim application;
the result is an array of HTTP status, header, and body. These three items
are returned to the HTTP client.</p>]]></long-description>
          <tag line="1093" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="1132" package="Slim">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="1132">
          <description><![CDATA[Call]]></description>
          <long-description><![CDATA[<p>Iterate each matching Route until all Routes are exhausted.</p>]]></long-description>
          <tag line="1132" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1194" package="Slim">
        <name>handleErrors</name>
        <full_name>handleErrors</full_name>
        <docblock line="1194">
          <description><![CDATA[Handle errors]]></description>
          <long-description><![CDATA[<p>This is the global Error handler that will catch reportable Errors
and convert them into ErrorExceptions that are caught and handled
by each Slim application.</p>]]></long-description>
          <tag line="1194" name="param" description="The numeric type of the Error" type="int" variable="$errno">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1194" name="param" description="The error message" type="string" variable="$errstr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1194" name="param" description="The absolute path to the affected file" type="string" variable="$errfile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1194" name="param" description="The line number of the error in the affected file" type="int" variable="$errline">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1194" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
          <tag line="1194" name="throws" description="" type="\ErrorException">
            <type by_reference="false">\ErrorException</type>
          </tag>
        </docblock>
        <argument line="1194">
          <name>$errno</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1194">
          <name>$errstr</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="1194">
          <name>$errfile</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="1194">
          <name>$errline</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="1212" package="Slim">
        <name>generateTemplateMarkup</name>
        <full_name>generateTemplateMarkup</full_name>
        <docblock line="1212">
          <description><![CDATA[Generate default template markup]]></description>
          <long-description><![CDATA[<p>This method accepts a title and body content to generate
an HTML page. This is primarily used to generate the layout markup
for Error handlers and Not Found handlers.</p>]]></long-description>
          <tag line="1212" name="param" description="The title of the HTML template" type="string" variable="$title">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1212" name="param" description="The body content of the HTML template" type="string" variable="$body">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1212" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1212">
          <name>$title</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1212">
          <name>$body</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="1220" package="Slim">
        <name>defaultNotFound</name>
        <full_name>defaultNotFound</full_name>
        <docblock line="1220">
          <description><![CDATA[Default Not Found handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1220" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="1228" package="Slim">
        <name>defaultError</name>
        <full_name>defaultError</full_name>
        <docblock line="1228">
          <description><![CDATA[Default Error handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1228" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="68" code="50019">No short description for property $apps</critical>
      <critical line="73" code="50019">No short description for property $name</critical>
      <critical line="78" code="50019">No short description for property $environment</critical>
      <critical line="83" code="50019">No short description for property $request</critical>
      <critical line="88" code="50019">No short description for property $response</critical>
      <critical line="93" code="50019">No short description for property $router</critical>
      <critical line="98" code="50019">No short description for property $view</critical>
      <critical line="103" code="50019">No short description for property $settings</critical>
      <critical line="108" code="50019">No short description for property $mode</critical>
      <critical line="113" code="50019">No short description for property $middleware</critical>
      <critical line="118" code="50019">No short description for property $hooks</critical>
      <error line="136" code="50015">Argument $class is missing from the Docblock of autoload()</error>
      <error line="783" code="50015">Argument $deleteIfInvalid is missing from the Docblock of getEncryptedCookie()</error>
      <error line="914" code="50014">Name of argument $code does not match with the DocBlock's name $status in status()</error>
      <notice line="914" code="50013">Parameter $status could not be found in status()</notice>
      <error line="1007" code="50014">Name of argument $hookArg does not match with the DocBlock's name $hookArgs in applyHook()</error>
      <notice line="1007" code="50013">Parameter $hookArgs could not be found in applyHook()</notice>
      <error line="1076" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $newMiddleware in add()</error>
    </parse_markers>
  </file>
  <file path="admin\Slim\View.php" hash="6d9ccd4777e4b988aba1fc8ec5338a52" package="Default">
    <include line="195" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="" line="47" package="Slim">
      <extends/>
      <name>Slim_View</name>
      <full_name>\Slim_View</full_name>
      <docblock line="47">
        <description><![CDATA[Slim View]]></description>
        <long-description><![CDATA[<p>The View is responsible for rendering and/or displaying a template.
It is recommended that you subclass View and re-implement the
<code>View::render</code> method to use a custom templating engine such as
Smarty, Twig, Mustache, etc. It is important that <code>View::render</code>
<code>return</code> the final template output. Do not <code>echo</code> the output.</p>]]></long-description>
        <tag line="47" name="package" description="Slim"/>
        <tag line="47" name="author" description="Josh Lockhart"/>
        <tag line="47" name="since" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" namespace="" package="Default">
        <name>$templatePath</name>
        <default><![CDATA['']]></default>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="Absolute template path" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" namespace="" package="Default">
        <name>$data</name>
        <default><![CDATA[array()]]></default>
        <docblock line="56">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="Key-value array of data available to the template" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="" package="Default">
        <name>$templatesDirectory</name>
        <default><![CDATA[]]></default>
        <docblock line="61">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="Absolute or relative path to the templates directory" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="68" package="Slim">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="68">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[<p>This is empty but may be overridden in a subclass</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Slim">
        <name>getData</name>
        <full_name>getData</full_name>
        <docblock line="77">
          <description><![CDATA[Get data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="All View data if no $key, value of datum if $key, or NULL if $key but datum does not exist." type="array|mixed|null">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="102" package="Slim">
        <name>setData</name>
        <full_name>setData</full_name>
        <docblock line="102">
          <description><![CDATA[Set data]]></description>
          <long-description><![CDATA[<p>This method is overloaded to accept two different method signatures.
You may use this to set a specific key with a specfic value,
or you may use this to set all data to a specific array.</p>

<p>USAGE:</p>

<p>View::setData('color', 'red');
View::setData(array('color' => 'red', 'number' => 1));</p>]]></long-description>
          <tag line="102" name="param" description="string|array" type="" variable=""/>
          <tag line="102" name="param" description="Optional. Only use if first argument is a string." type="mixed" variable="">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="102" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="102" name="throws" description="If incorrect method signature" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="119" package="Slim">
        <name>appendData</name>
        <full_name>appendData</full_name>
        <docblock line="119">
          <description><![CDATA[Append data to existing View data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="119" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="119" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="130" package="Slim">
        <name>getTemplatesDirectory</name>
        <full_name>getTemplatesDirectory</full_name>
        <docblock line="130">
          <description><![CDATA[Get templates directory]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="Path to templates directory without trailing slash" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="140" package="Slim">
        <name>setTemplatesDirectory</name>
        <full_name>setTemplatesDirectory</full_name>
        <docblock line="140">
          <description><![CDATA[Set templates directory]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="" type="string" variable="$dir">
            <type by_reference="false">string</type>
          </tag>
          <tag line="140" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="140" name="throws" description="If directory is not a directory or does not exist" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$dir</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="150" package="Slim">
        <name>setTemplate</name>
        <full_name>setTemplate</full_name>
        <docblock line="150">
          <description><![CDATA[Set template]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="" type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="150" name="throws" description="If template file does not exist" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$template</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="166" package="Slim">
        <name>display</name>
        <full_name>display</full_name>
        <docblock line="166">
          <description><![CDATA[Display template]]></description>
          <long-description><![CDATA[<p>This method echoes the rendered template to the current output buffer</p>]]></long-description>
          <tag line="166" name="param" description="Path to template file relative to templates directoy" type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="166" name="throws" description="If template does not exist" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$template</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="178" package="Slim">
        <name>fetch</name>
        <full_name>fetch</full_name>
        <docblock line="178">
          <description><![CDATA[Fetch rendered template]]></description>
          <long-description><![CDATA[<p>This method return the rendered template as a string</p>]]></long-description>
          <tag line="178" name="param" description="Path to template file relative to templates directoy" type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="178" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$template</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="191" package="Slim">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="191">
          <description><![CDATA[Render template]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="return" description="Rendered template DEPRECATION WARNING! This method will be made PROTECTED in a future version. Please use `Slim_View::fetch` to return a rendered template instead of `Slim_View::render`." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$template</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="51" code="50019">No short description for property $templatePath</critical>
      <critical line="56" code="50019">No short description for property $data</critical>
      <critical line="61" code="50019">No short description for property $templatesDirectory</critical>
      <notice line="102" code="50013">Parameter  could not be found in setData()</notice>
      <notice line="102" code="50013">Parameter  could not be found in setData()</notice>
      <error line="191" code="50015">Argument $template is missing from the Docblock of render()</error>
    </parse_markers>
  </file>
  <file path="admin\views\index.php" hash="3a1a0bde529451c382e51ab82c95c5d6" package="Default"/>
  <file path="BatchBase.php" hash="cd3ce2e36cedba87f75ef512cebffc9e" package="Default">
    <include line="16" type="Require Once" package="Default">
      <name>BatchInterface.php</name>
    </include>
    <class final="false" abstract="false" namespace="Allproperty" line="22" package="Default">
      <extends>Allproperty\Guru</extends>
      <name>BatchBase</name>
      <full_name>\Allproperty\BatchBase</full_name>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="author" description="John Rocela &lt;johnmark@allproperty.com.sg&gt;"/>
        <tag line="22" name="date" description="June 12, 2012"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="27" namespace="Allproperty" package="Default">
        <name>$__OUTPUT</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[the output to be returned by output()]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="Allproperty" package="Default">
        <name>$__ERRORS</name>
        <default><![CDATA[array()]]></default>
        <docblock line="32">
          <description><![CDATA[an array of errors captured]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="Allproperty" package="Default">
        <name>$job</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[the BatchJob object of the current batch that needs to run]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="45" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="45">
          <description><![CDATA[The Controller Construct]]></description>
          <long-description><![CDATA[<p>loads configurations and do base initializations
for the batch file</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="57" package="Default">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="57">
          <description><![CDATA[The Controller Destruct]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="103" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="103">
          <description><![CDATA[Public entry point for running a job on this batch]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="object $job BatchJob object" type="\BatchJob" variable="$job">
            <type by_reference="false">\BatchJob</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$job</name>
          <default><![CDATA[]]></default>
          <type>Allproperty\BatchJob</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="140" package="Default">
        <name>output</name>
        <full_name>output</full_name>
        <docblock line="140">
          <description><![CDATA[Overrideable method that handles the output]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="return" description="return an output" type="\must">
            <type by_reference="false">\must</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="148" package="Default">
        <name>error</name>
        <full_name>error</full_name>
        <docblock line="148">
          <description><![CDATA[a function to log errors and mark it appropriately]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="148">
          <name>$error</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$code</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Allproperty" line="161" package="Default">
        <name>__start</name>
        <full_name>__start</full_name>
        <docblock line="161">
          <description><![CDATA[an event thrown before doing the batch.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="173" package="Default">
        <name>init</name>
        <full_name>init</full_name>
        <docblock line="173">
          <description><![CDATA[an event thrown before doing the batch. can be overridden.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="180" package="Default">
        <name>success</name>
        <full_name>success</full_name>
        <docblock line="180">
          <description><![CDATA[an event thrown when the batch process finishes and succeeds. can be overridden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="180" name="param" description="string the captured output into stream" type="string" variable="$output">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$output</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="187" package="Default">
        <name>fail</name>
        <full_name>fail</full_name>
        <docblock line="187">
          <description><![CDATA[an event thrown when the batch process finishes and fails. can be overridden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="the errors available" type="array" variable="$errors">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$errors</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="192" package="Default">
        <name>done</name>
        <full_name>done</full_name>
        <docblock line="192">
          <description><![CDATA[an event thrown when the batch is completely done. can be overridden.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Allproperty" line="197" package="Default">
        <name>__done</name>
        <full_name>__done</full_name>
        <docblock line="197">
          <description><![CDATA[an event thrown when the batch is completely done.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="219" package="Default">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="219">
          <description><![CDATA[a static method that makes logging convenient in the system context]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="219">
          <name>$message</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="228" package="Default">
        <name>getBenchmark</name>
        <full_name>getBenchmark</full_name>
        <docblock line="228">
          <description><![CDATA[just return the benchmark of the batch job that ran]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="22" code="50005">No short description for class \Allproperty\BatchBase</critical>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $job in run()</error>
      <error line="140" code="50015">Argument $output is missing from the Docblock of output()</error>
      <error line="148" code="50015">Argument $error is missing from the Docblock of error()</error>
      <error line="148" code="50015">Argument $code is missing from the Docblock of error()</error>
      <error line="219" code="50015">Argument $message is missing from the Docblock of log()</error>
    </parse_markers>
  </file>
  <file path="BatchHandler.php" hash="b9213c66761a1985d98ad02a4ed9b44c" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name>../../../bootstrap.php</name>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name>BatchBase.php</name>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name>BatchManager.php</name>
    </include>
    <constant namespace="" line="19" package="Default">
      <name>MAINTENANCE_MODE</name>
      <full_name>\MAINTENANCE_MODE</full_name>
      <value><![CDATA[false]]></value>
    </constant>
  </file>
  <file path="BatchInterface.php" hash="1556f2cea34e96d97d67b47ac19dbff3" package="Default">
    <interface namespace="" line="15" package="Default">
      <name>BatchInterface</name>
      <full_name>\BatchInterface</full_name>
      <docblock line="15">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="author" description="John Rocela &lt;johnmark@allproperty.com.sg&gt;"/>
        <tag line="15" name="date" description="June 12, 2012"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="20" package="Default">
        <name>init</name>
        <full_name>init</full_name>
        <docblock line="20">
          <description><![CDATA[a constructor method for the batch that can be overridden from the BatchBase]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="25" package="Default">
        <name>action</name>
        <full_name>action</full_name>
        <docblock line="25">
          <description><![CDATA[the actual logic block for the batch file]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="BatchJob.php" hash="fa5df117d69605b17c77fd302381ec24" package="Default">
    <include line="16" type="Require Once" package="Default">
      <name>cron.phar</name>
      <docblock line="16">
        <description><![CDATA[https://github.com/mtdowling/cron-expression]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </include>
    <include line="194" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Allproperty" line="22" package="Default">
      <extends/>
      <name>BatchJob</name>
      <full_name>\Allproperty\BatchJob</full_name>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="author" description="John Rocela &lt;johnmark@allproperty.com.sg&gt;"/>
        <tag line="22" name="date" description="June 12, 2012"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="123" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="123">
          <description><![CDATA[The Controller Construct]]></description>
          <long-description><![CDATA[<p>loads configurations and do base initializations
for the batch file</p>]]></long-description>
          <tag line="123" name="params" description="array $job the job object from a DB query"/>
        </docblock>
        <argument line="123">
          <name>$job</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="182" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="182">
          <description><![CDATA[Run the Job's class and invoke the start and stop event]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="211" package="Default">
        <name>getId</name>
        <full_name>getId</full_name>
        <docblock line="211">
          <description><![CDATA[Get the Job's ID]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="219" package="Default">
        <name>getPID</name>
        <full_name>getPID</full_name>
        <docblock line="219">
          <description><![CDATA[Get the Job's Process ID. Usually returned by the script itself.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="227" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="227">
          <description><![CDATA[Get the Job's Descriptive Identifier]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="235" package="Default">
        <name>getParams</name>
        <full_name>getParams</full_name>
        <docblock line="235">
          <description><![CDATA[Get the Job's Parameters]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="243" package="Default">
        <name>getStatusCode</name>
        <full_name>getStatusCode</full_name>
        <docblock line="243">
          <description><![CDATA[Get the Job's Status whether it is Active or Idle]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="251" package="Default">
        <name>getStatus</name>
        <full_name>getStatus</full_name>
        <docblock line="251">
          <description><![CDATA[An alias to self::getStatusCode()]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="259" package="Default">
        <name>getLocaleCode</name>
        <full_name>getLocaleCode</full_name>
        <docblock line="259">
          <description><![CDATA[Get the Job's Locale Identifier]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="267" package="Default">
        <name>isExclusive</name>
        <full_name>isExclusive</full_name>
        <docblock line="267">
          <description><![CDATA[Get the Job's Exclusivity status]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="275" package="Default">
        <name>isRunning</name>
        <full_name>isRunning</full_name>
        <docblock line="275">
          <description><![CDATA[Get the Job's Running status]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="283" package="Default">
        <name>isExclusivelyRunning</name>
        <full_name>isExclusivelyRunning</full_name>
        <docblock line="283">
          <description><![CDATA[Get the Job's status whether it's running and if it is exclusive]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="294" package="Default">
        <name>getRawSchedule</name>
        <full_name>getRawSchedule</full_name>
        <docblock line="294">
          <description><![CDATA[Get the Job's schedule in Cron String format]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="302" package="Default">
        <name>getSchedule</name>
        <full_name>getSchedule</full_name>
        <docblock line="302">
          <description><![CDATA[Get the Job's Parsed Schedule using cron.phar]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="312" package="Default">
        <name>getNextRun</name>
        <full_name>getNextRun</full_name>
        <docblock line="312">
          <description><![CDATA[Get the Job's Next run DateTime]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="320" package="Default">
        <name>getLastSuccess</name>
        <full_name>getLastSuccess</full_name>
        <docblock line="320">
          <description><![CDATA[Get the Job's DateTime where it last successfully finished]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="328" package="Default">
        <name>getLastFailed</name>
        <full_name>getLastFailed</full_name>
        <docblock line="328">
          <description><![CDATA[Get the Job's DateTime where it last failed]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="336" package="Default">
        <name>getLastDuration</name>
        <full_name>getLastDuration</full_name>
        <docblock line="336">
          <description><![CDATA[Get the Job's Last Duration in seconds]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="344" package="Default">
        <name>getLastRunStatus</name>
        <full_name>getLastRunStatus</full_name>
        <docblock line="344">
          <description><![CDATA[Get the Job's Last Run Status]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="356" package="Default">
        <name>getHistory</name>
        <full_name>getHistory</full_name>
        <docblock line="356">
          <description><![CDATA[Get the Job's History]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="368" package="Default">
        <name>getLogs</name>
        <full_name>getLogs</full_name>
        <docblock line="368">
          <description><![CDATA[Get the Job's Logs]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="395" package="Default">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="395">
          <description><![CDATA[a static method that makes logging convenient in the system context]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="395">
          <name>$message</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="22" code="50005">No short description for class \Allproperty\BatchJob</critical>
      <error line="123" code="50015">Argument $job is missing from the Docblock of __construct()</error>
      <error line="384" code="50015">Argument $schedule is missing from the Docblock of _fixCronSyntax()</error>
      <error line="395" code="50015">Argument $message is missing from the Docblock of log()</error>
    </parse_markers>
  </file>
  <file path="BatchManager.php" hash="dc1938e39820c1075c18a2a9ca2b5895" package="Default">
    <include line="14" type="Include" package="Default">
      <name>BatchJob.php</name>
    </include>
    <class final="false" abstract="false" namespace="Allproperty" line="23" package="Default">
      <extends>Allproperty\Guru</extends>
      <name>BatchManager</name>
      <full_name>\Allproperty\BatchManager</full_name>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="author" description="John Rocela &lt;johnmark@allproperty.com.sg&gt;"/>
        <tag line="23" name="date" description="June 12, 2012"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="30" package="Default">
        <name>runJob</name>
        <full_name>runJob</full_name>
        <docblock line="30">
          <description><![CDATA[Run a Job according to jobId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="params" description="Integer $jobId the ID of the job needed to run"/>
        </docblock>
        <argument line="30">
          <name>$jobId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="46" package="Default">
        <name>getBatches</name>
        <full_name>getBatches</full_name>
        <docblock line="46">
          <description><![CDATA[Get all Batches from the Database]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="57" package="Default">
        <name>getBatch</name>
        <full_name>getBatch</full_name>
        <docblock line="57">
          <description><![CDATA[Get the Batch according to batchId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="params" description="Integer $batchId the ID of the batch"/>
        </docblock>
        <argument line="57">
          <name>$batchId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="71" package="Default">
        <name>getBatchHealth</name>
        <full_name>getBatchHealth</full_name>
        <docblock line="71">
          <description><![CDATA[Get the Batch Health according to batchId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="params" description="Integer $batchId the ID of the batch"/>
        </docblock>
        <argument line="71">
          <name>$batchId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="104" package="Default">
        <name>getJob</name>
        <full_name>getJob</full_name>
        <docblock line="104">
          <description><![CDATA[Get the Job according to jobId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="params" description="Integer $jobId the ID of the job"/>
        </docblock>
        <argument line="104">
          <name>$jobId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="119" package="Default">
        <name>getJobs</name>
        <full_name>getJobs</full_name>
        <docblock line="119">
          <description><![CDATA[Get all Jobs]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="119">
          <name>$batchId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="134" package="Default">
        <name>getRunningJobs</name>
        <full_name>getRunningJobs</full_name>
        <docblock line="134">
          <description><![CDATA[Get all running jobs according to $batchId or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="134" name="params" description="Integer $batchId the ID of the batch"/>
        </docblock>
        <argument line="134">
          <name>$batchId</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="155" package="Default">
        <name>getHistory</name>
        <full_name>getHistory</full_name>
        <docblock line="155">
          <description><![CDATA[Get history from every job]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="167" package="Default">
        <name>getLogs</name>
        <full_name>getLogs</full_name>
        <docblock line="167">
          <description><![CDATA[Get logs from every job]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Allproperty" line="179" package="Default">
        <name>getRunningJobsToday</name>
        <full_name>getRunningJobsToday</full_name>
        <docblock line="179">
          <description><![CDATA[Get all running jobs today]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="23" code="50005">No short description for class \Allproperty\BatchManager</critical>
      <error line="30" code="50015">Argument $jobId is missing from the Docblock of runJob()</error>
      <error line="57" code="50015">Argument $batchId is missing from the Docblock of getBatch()</error>
      <error line="71" code="50015">Argument $batchId is missing from the Docblock of getBatchHealth()</error>
      <error line="104" code="50015">Argument $jobId is missing from the Docblock of getJob()</error>
      <error line="119" code="50015">Argument $batchId is missing from the Docblock of getJobs()</error>
      <error line="134" code="50015">Argument $batchId is missing from the Docblock of getRunningJobs()</error>
    </parse_markers>
  </file>
  <file path="BatchShell.php" hash="d41d8cd98f00b204e9800998ecf8427e" package="Default"/>
  <package name="Default" full_name="Default"/>
  <package name="Slim" full_name="Slim"/>
  <namespace name="" full_name=""/>
  <namespace name="Allproperty" full_name="Allproperty"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
